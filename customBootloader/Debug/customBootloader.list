
customBootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003014  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800319c  0800319c  0001319c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031b4  080031b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080031b4  080031b4  000131b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031bc  080031bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031bc  080031bc  000131bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031c0  080031c0  000131c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  2000000c  080031d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  080031d0  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e52  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002235  00000000  00000000  00029e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008f8  00000000  00000000  0002c0c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007c0  00000000  00000000  0002c9c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020505  00000000  00000000  0002d180  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009d67  00000000  00000000  0004d685  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bed1f  00000000  00000000  000573ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011610b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002154  00000000  00000000  00116188  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003184 	.word	0x08003184

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003184 	.word	0x08003184

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <bootloader_jump_to_user_app>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void bootloader_jump_to_user_app(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
	void ** base_add_ptr = (void **)(FLASH_BASE_ADDRESS_SECTOR_2 + 4);
 80004ce:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <bootloader_jump_to_user_app+0x1c>)
 80004d0:	607b      	str	r3, [r7, #4]
	void (*app_reset_handler)(void) = (void(*)(void)) (*base_add_ptr); /*Adresi func pointer a dönüştür.*/
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	603b      	str	r3, [r7, #0]

	//uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
	//This function comes from CMSIS.
	//__set_MSP(msp_value);

	app_reset_handler();
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	4798      	blx	r3
}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	08008004 	.word	0x08008004

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fa5a 	bl	80009a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f81c 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f8c2 	bl	800067c <MX_GPIO_Init>
  MX_CRC_Init();
 80004f8:	f000 f882 	bl	8000600 <MX_CRC_Init>
  MX_USART3_UART_Init();
 80004fc:	f000 f894 	bl	8000628 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  /* Lets check whether button is pressed or not, if not pressed jump to user application */
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8000500:	2101      	movs	r1, #1
 8000502:	4809      	ldr	r0, [pc, #36]	; (8000528 <main+0x40>)
 8000504:	f001 f8aa 	bl	800165c <HAL_GPIO_ReadPin>
 8000508:	4603      	mov	r3, r0
 800050a:	2b01      	cmp	r3, #1
 800050c:	d105      	bne.n	800051a <main+0x32>
	{
	  //we should continue in bootloader mode
		send_message_to_host((uint8_t) TX_BL_IS_READY);
 800050e:	2001      	movs	r0, #1
 8000510:	f002 fdfa 	bl	8003108 <send_message_to_host>
	  bootloader_uart_read_data();
 8000514:	f002 fde0 	bl	80030d8 <bootloader_uart_read_data>
 8000518:	e004      	b.n	8000524 <main+0x3c>
	}
	else
	{
	//jump to user application
		send_message_to_host((uint8_t) TX_USER_APP_RUNNING);
 800051a:	2006      	movs	r0, #6
 800051c:	f002 fdf4 	bl	8003108 <send_message_to_host>
    /*Add sector info*/
	  bootloader_jump_to_user_app();
 8000520:	f7ff ffd2 	bl	80004c8 <bootloader_jump_to_user_app>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000524:	e7fe      	b.n	8000524 <main+0x3c>
 8000526:	bf00      	nop
 8000528:	40020000 	.word	0x40020000

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f002 fe1a 	bl	8003174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a27      	ldr	r2, [pc, #156]	; (80005f8 <SystemClock_Config+0xcc>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a21      	ldr	r2, [pc, #132]	; (80005fc <SystemClock_Config+0xd0>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2310      	movs	r3, #16
 8000592:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000594:	2302      	movs	r3, #2
 8000596:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000598:	2300      	movs	r3, #0
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800059c:	2308      	movs	r3, #8
 800059e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80005a0:	2354      	movs	r3, #84	; 0x54
 80005a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a8:	2307      	movs	r3, #7
 80005aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0320 	add.w	r3, r7, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 f88f 	bl	80016d4 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005bc:	f000 f8a4 	bl	8000708 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c4:	2302      	movs	r3, #2
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2102      	movs	r1, #2
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fae8 	bl	8001bb4 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ea:	f000 f88d 	bl	8000708 <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3750      	adds	r7, #80	; 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_CRC_Init+0x20>)
 8000606:	4a07      	ldr	r2, [pc, #28]	; (8000624 <MX_CRC_Init+0x24>)
 8000608:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800060a:	4805      	ldr	r0, [pc, #20]	; (8000620 <MX_CRC_Init+0x20>)
 800060c:	f000 fb4d 	bl	8000caa <HAL_CRC_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000616:	f000 f877 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000068 	.word	0x20000068
 8000624:	40023000 	.word	0x40023000

08000628 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_USART3_UART_Init+0x4c>)
 800062e:	4a12      	ldr	r2, [pc, #72]	; (8000678 <MX_USART3_UART_Init+0x50>)
 8000630:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_USART3_UART_Init+0x4c>)
 8000634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000638:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_USART3_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_USART3_UART_Init+0x4c>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <MX_USART3_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_USART3_UART_Init+0x4c>)
 800064e:	220c      	movs	r2, #12
 8000650:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <MX_USART3_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_USART3_UART_Init+0x4c>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_USART3_UART_Init+0x4c>)
 8000660:	f001 fc9a 	bl	8001f98 <HAL_UART_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800066a:	f000 f84d 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000028 	.word	0x20000028
 8000678:	40004800 	.word	0x40004800

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <MX_GPIO_Init+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a18      	ldr	r2, [pc, #96]	; (80006fc <MX_GPIO_Init+0x80>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <MX_GPIO_Init+0x80>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_GPIO_Init+0x80>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a11      	ldr	r2, [pc, #68]	; (80006fc <MX_GPIO_Init+0x80>)
 80006b8:	f043 0304 	orr.w	r3, r3, #4
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_GPIO_Init+0x80>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0304 	and.w	r3, r3, #4
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ca:	2301      	movs	r3, #1
 80006cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_GPIO_Init+0x84>)
 80006d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	4619      	mov	r1, r3
 80006dc:	4809      	ldr	r0, [pc, #36]	; (8000704 <MX_GPIO_Init+0x88>)
 80006de:	f000 fe23 	bl	8001328 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2100      	movs	r1, #0
 80006e6:	2006      	movs	r0, #6
 80006e8:	f000 faa9 	bl	8000c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006ec:	2006      	movs	r0, #6
 80006ee:	f000 fac2 	bl	8000c76 <HAL_NVIC_EnableIRQ>

}
 80006f2:	bf00      	nop
 80006f4:	3720      	adds	r7, #32
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	10110000 	.word	0x10110000
 8000704:	40020000 	.word	0x40020000

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070e:	e7fe      	b.n	800070e <Error_Handler+0x6>

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <HAL_MspInit+0x4c>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071e:	4a0f      	ldr	r2, [pc, #60]	; (800075c <HAL_MspInit+0x4c>)
 8000720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000724:	6453      	str	r3, [r2, #68]	; 0x44
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <HAL_MspInit+0x4c>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <HAL_MspInit+0x4c>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <HAL_MspInit+0x4c>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	6413      	str	r3, [r2, #64]	; 0x40
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_MspInit+0x4c>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800074e:	2007      	movs	r0, #7
 8000750:	f000 fa6a 	bl	8000c28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800

08000760 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a0b      	ldr	r2, [pc, #44]	; (800079c <HAL_CRC_MspInit+0x3c>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d10d      	bne.n	800078e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <HAL_CRC_MspInit+0x40>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a09      	ldr	r2, [pc, #36]	; (80007a0 <HAL_CRC_MspInit+0x40>)
 800077c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <HAL_CRC_MspInit+0x40>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800078e:	bf00      	nop
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40023000 	.word	0x40023000
 80007a0:	40023800 	.word	0x40023800

080007a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a1d      	ldr	r2, [pc, #116]	; (8000838 <HAL_UART_MspInit+0x94>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d134      	bne.n	8000830 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <HAL_UART_MspInit+0x98>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	4a1b      	ldr	r2, [pc, #108]	; (800083c <HAL_UART_MspInit+0x98>)
 80007d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007d4:	6413      	str	r3, [r2, #64]	; 0x40
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <HAL_UART_MspInit+0x98>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <HAL_UART_MspInit+0x98>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a14      	ldr	r2, [pc, #80]	; (800083c <HAL_UART_MspInit+0x98>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_UART_MspInit+0x98>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000810:	2307      	movs	r3, #7
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	4809      	ldr	r0, [pc, #36]	; (8000840 <HAL_UART_MspInit+0x9c>)
 800081c:	f000 fd84 	bl	8001328 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2100      	movs	r1, #0
 8000824:	2027      	movs	r0, #39	; 0x27
 8000826:	f000 fa0a 	bl	8000c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800082a:	2027      	movs	r0, #39	; 0x27
 800082c:	f000 fa23 	bl	8000c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000830:	bf00      	nop
 8000832:	3728      	adds	r7, #40	; 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40004800 	.word	0x40004800
 800083c:	40023800 	.word	0x40023800
 8000840:	40020800 	.word	0x40020800

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <NMI_Handler+0x4>

0800084a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <MemManage_Handler+0x4>

08000856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <UsageFault_Handler+0x4>

08000862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000890:	f000 f8da 	bl	8000a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}

08000898 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800089c:	2001      	movs	r0, #1
 800089e:	f000 fef5 	bl	800168c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	//HAL_UART_Transmit(&huart3, (uint8_t *)"Burak\n", 7, 0xFFF);
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <USART3_IRQHandler+0x10>)
 80008ae:	f001 fcff 	bl	80022b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  //HAL_UART_Receive_IT(&huart3, (uint8_t *)&esp8266_uart_receive, 1);
  /* USER CODE END USART3_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000028 	.word	0x20000028

080008bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <SystemInit+0x28>)
 80008c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008c6:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <SystemInit+0x28>)
 80008c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <SystemInit+0x28>)
 80008d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008d6:	609a      	str	r2, [r3, #8]
#endif
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000920 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008ee:	e003      	b.n	80008f8 <LoopCopyDataInit>

080008f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80008f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008f6:	3104      	adds	r1, #4

080008f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80008f8:	480b      	ldr	r0, [pc, #44]	; (8000928 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80008fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000900:	d3f6      	bcc.n	80008f0 <CopyDataInit>
  ldr  r2, =_sbss
 8000902:	4a0b      	ldr	r2, [pc, #44]	; (8000930 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000904:	e002      	b.n	800090c <LoopFillZerobss>

08000906 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000906:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000908:	f842 3b04 	str.w	r3, [r2], #4

0800090c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800090e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000910:	d3f9      	bcc.n	8000906 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000912:	f7ff ffd3 	bl	80008bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000916:	f002 fc09 	bl	800312c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800091a:	f7ff fde5 	bl	80004e8 <main>
  bx  lr    
 800091e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000920:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000924:	080031c4 	.word	0x080031c4
  ldr  r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800092c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000930:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000934:	200001a8 	.word	0x200001a8

08000938 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <ADC_IRQHandler>
	...

0800093c <bootloader_verify_crc>:

#include "calculate_crc.h"
#include "main.h"

PUBLIC uint8_t bootloader_verify_crc(uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
  uint32_t uwCRCValue=0xff;
 8000948:	23ff      	movs	r3, #255	; 0xff
 800094a:	61fb      	str	r3, [r7, #28]

  for (uint32_t i=0 ; i < len ; i++)
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
 8000950:	e00f      	b.n	8000972 <bootloader_verify_crc+0x36>
	{
    uint32_t i_data = pData[i];
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	617b      	str	r3, [r7, #20]
    uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	2201      	movs	r2, #1
 8000962:	4619      	mov	r1, r3
 8000964:	480e      	ldr	r0, [pc, #56]	; (80009a0 <bootloader_verify_crc+0x64>)
 8000966:	f000 f9bc 	bl	8000ce2 <HAL_CRC_Accumulate>
 800096a:	61f8      	str	r0, [r7, #28]
  for (uint32_t i=0 ; i < len ; i++)
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	3301      	adds	r3, #1
 8000970:	61bb      	str	r3, [r7, #24]
 8000972:	69ba      	ldr	r2, [r7, #24]
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	429a      	cmp	r2, r3
 8000978:	d3eb      	bcc.n	8000952 <bootloader_verify_crc+0x16>
	}

  /* Reset CRC Calculation Unit */
  __HAL_CRC_DR_RESET(&hcrc);
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <bootloader_verify_crc+0x64>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	689a      	ldr	r2, [r3, #8]
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <bootloader_verify_crc+0x64>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f042 0201 	orr.w	r2, r2, #1
 8000988:	609a      	str	r2, [r3, #8]

	if( uwCRCValue == crc_host)
 800098a:	69fa      	ldr	r2, [r7, #28]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	429a      	cmp	r2, r3
 8000990:	d101      	bne.n	8000996 <bootloader_verify_crc+0x5a>
	{
		return SUCCESS;
 8000992:	2300      	movs	r3, #0
 8000994:	e000      	b.n	8000998 <bootloader_verify_crc+0x5c>
	}

	return ERROR;
 8000996:	2301      	movs	r3, #1
}
 8000998:	4618      	mov	r0, r3
 800099a:	3720      	adds	r7, #32
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000068 	.word	0x20000068

080009a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009a8:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <HAL_Init+0x40>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a0d      	ldr	r2, [pc, #52]	; (80009e4 <HAL_Init+0x40>)
 80009ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009b4:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <HAL_Init+0x40>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <HAL_Init+0x40>)
 80009ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <HAL_Init+0x40>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <HAL_Init+0x40>)
 80009c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009cc:	2003      	movs	r0, #3
 80009ce:	f000 f92b 	bl	8000c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f000 f808 	bl	80009e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d8:	f7ff fe9a 	bl	8000710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023c00 	.word	0x40023c00

080009e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <HAL_InitTick+0x54>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <HAL_InitTick+0x58>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4619      	mov	r1, r3
 80009fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 f943 	bl	8000c92 <HAL_SYSTICK_Config>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e00e      	b.n	8000a34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b0f      	cmp	r3, #15
 8000a1a:	d80a      	bhi.n	8000a32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295
 8000a24:	f000 f90b 	bl	8000c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a28:	4a06      	ldr	r2, [pc, #24]	; (8000a44 <HAL_InitTick+0x5c>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e000      	b.n	8000a34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	20000008 	.word	0x20000008
 8000a44:	20000004 	.word	0x20000004

08000a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_IncTick+0x20>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_IncTick+0x24>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <HAL_IncTick+0x24>)
 8000a5a:	6013      	str	r3, [r2, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	20000070 	.word	0x20000070

08000a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return uwTick;
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <HAL_GetTick+0x14>)
 8000a76:	681b      	ldr	r3, [r3, #0]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	20000070 	.word	0x20000070

08000a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aba:	4a04      	ldr	r2, [pc, #16]	; (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	f003 0307 	and.w	r3, r3, #7
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	db0b      	blt.n	8000b16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	f003 021f 	and.w	r2, r3, #31
 8000b04:	4907      	ldr	r1, [pc, #28]	; (8000b24 <__NVIC_EnableIRQ+0x38>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	095b      	lsrs	r3, r3, #5
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000e100 	.word	0xe000e100

08000b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	db0a      	blt.n	8000b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	490c      	ldr	r1, [pc, #48]	; (8000b74 <__NVIC_SetPriority+0x4c>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	0112      	lsls	r2, r2, #4
 8000b48:	b2d2      	uxtb	r2, r2
 8000b4a:	440b      	add	r3, r1
 8000b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b50:	e00a      	b.n	8000b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4908      	ldr	r1, [pc, #32]	; (8000b78 <__NVIC_SetPriority+0x50>)
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	f003 030f 	and.w	r3, r3, #15
 8000b5e:	3b04      	subs	r3, #4
 8000b60:	0112      	lsls	r2, r2, #4
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	440b      	add	r3, r1
 8000b66:	761a      	strb	r2, [r3, #24]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000e100 	.word	0xe000e100
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b089      	sub	sp, #36	; 0x24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	f1c3 0307 	rsb	r3, r3, #7
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	bf28      	it	cs
 8000b9a:	2304      	movcs	r3, #4
 8000b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	d902      	bls.n	8000bac <NVIC_EncodePriority+0x30>
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3b03      	subs	r3, #3
 8000baa:	e000      	b.n	8000bae <NVIC_EncodePriority+0x32>
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	fa01 f303 	lsl.w	r3, r1, r3
 8000bce:	43d9      	mvns	r1, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	4313      	orrs	r3, r2
         );
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3724      	adds	r7, #36	; 0x24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf4:	d301      	bcc.n	8000bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00f      	b.n	8000c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <SysTick_Config+0x40>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c02:	210f      	movs	r1, #15
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f7ff ff8e 	bl	8000b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <SysTick_Config+0x40>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <SysTick_Config+0x40>)
 8000c14:	2207      	movs	r2, #7
 8000c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	e000e010 	.word	0xe000e010

08000c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ff29 	bl	8000a88 <__NVIC_SetPriorityGrouping>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c50:	f7ff ff3e 	bl	8000ad0 <__NVIC_GetPriorityGrouping>
 8000c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	68b9      	ldr	r1, [r7, #8]
 8000c5a:	6978      	ldr	r0, [r7, #20]
 8000c5c:	f7ff ff8e 	bl	8000b7c <NVIC_EncodePriority>
 8000c60:	4602      	mov	r2, r0
 8000c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff5d 	bl	8000b28 <__NVIC_SetPriority>
}
 8000c6e:	bf00      	nop
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff31 	bl	8000aec <__NVIC_EnableIRQ>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ffa2 	bl	8000be4 <SysTick_Config>
 8000ca0:	4603      	mov	r3, r0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e00e      	b.n	8000cda <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	795b      	ldrb	r3, [r3, #5]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d105      	bne.n	8000cd2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff fd47 	bl	8000760 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b087      	sub	sp, #28
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	60f8      	str	r0, [r7, #12]
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	e00a      	b.n	8000d14 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	441a      	add	r2, r3
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	6812      	ldr	r2, [r2, #0]
 8000d0c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3301      	adds	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d3f0      	bcc.n	8000cfe <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2201      	movs	r2, #1
 8000d28:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8000d2a:	693b      	ldr	r3, [r7, #16]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	371c      	adds	r7, #28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d004      	beq.n	8000d56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2280      	movs	r2, #128	; 0x80
 8000d50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00c      	b.n	8000d70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2205      	movs	r2, #5
 8000d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f022 0201 	bic.w	r2, r2, #1
 8000d6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000d8e:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <HAL_FLASH_Program+0xa0>)
 8000d90:	7e1b      	ldrb	r3, [r3, #24]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d101      	bne.n	8000d9a <HAL_FLASH_Program+0x1e>
 8000d96:	2302      	movs	r3, #2
 8000d98:	e03b      	b.n	8000e12 <HAL_FLASH_Program+0x96>
 8000d9a:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <HAL_FLASH_Program+0xa0>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000da0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000da4:	f000 f870 	bl	8000e88 <FLASH_WaitForLastOperation>
 8000da8:	4603      	mov	r3, r0
 8000daa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000dac:	7dfb      	ldrb	r3, [r7, #23]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d12b      	bne.n	8000e0a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d105      	bne.n	8000dc4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000db8:	783b      	ldrb	r3, [r7, #0]
 8000dba:	4619      	mov	r1, r3
 8000dbc:	68b8      	ldr	r0, [r7, #8]
 8000dbe:	f000 f919 	bl	8000ff4 <FLASH_Program_Byte>
 8000dc2:	e016      	b.n	8000df2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d105      	bne.n	8000dd6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000dca:	883b      	ldrh	r3, [r7, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	68b8      	ldr	r0, [r7, #8]
 8000dd0:	f000 f8ec 	bl	8000fac <FLASH_Program_HalfWord>
 8000dd4:	e00d      	b.n	8000df2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d105      	bne.n	8000de8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	4619      	mov	r1, r3
 8000de0:	68b8      	ldr	r0, [r7, #8]
 8000de2:	f000 f8c1 	bl	8000f68 <FLASH_Program_Word>
 8000de6:	e004      	b.n	8000df2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000de8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000dec:	68b8      	ldr	r0, [r7, #8]
 8000dee:	f000 f88b 	bl	8000f08 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000df2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000df6:	f000 f847 	bl	8000e88 <FLASH_WaitForLastOperation>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_FLASH_Program+0xa4>)
 8000e00:	691b      	ldr	r3, [r3, #16]
 8000e02:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <HAL_FLASH_Program+0xa4>)
 8000e04:	f023 0301 	bic.w	r3, r3, #1
 8000e08:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <HAL_FLASH_Program+0xa0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8000e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000074 	.word	0x20000074
 8000e20:	40023c00 	.word	0x40023c00

08000e24 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <HAL_FLASH_Unlock+0x38>)
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	da0b      	bge.n	8000e4e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_FLASH_Unlock+0x38>)
 8000e38:	4a09      	ldr	r2, [pc, #36]	; (8000e60 <HAL_FLASH_Unlock+0x3c>)
 8000e3a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <HAL_FLASH_Unlock+0x38>)
 8000e3e:	4a09      	ldr	r2, [pc, #36]	; (8000e64 <HAL_FLASH_Unlock+0x40>)
 8000e40:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_FLASH_Unlock+0x38>)
 8000e44:	691b      	ldr	r3, [r3, #16]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	da01      	bge.n	8000e4e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	40023c00 	.word	0x40023c00
 8000e60:	45670123 	.word	0x45670123
 8000e64:	cdef89ab 	.word	0xcdef89ab

08000e68 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <HAL_FLASH_Lock+0x1c>)
 8000e6e:	691b      	ldr	r3, [r3, #16]
 8000e70:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <HAL_FLASH_Lock+0x1c>)
 8000e72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e76:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	40023c00 	.word	0x40023c00

08000e88 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000e94:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <FLASH_WaitForLastOperation+0x78>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8000e9a:	f7ff fde9 	bl	8000a70 <HAL_GetTick>
 8000e9e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000ea0:	e010      	b.n	8000ec4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea8:	d00c      	beq.n	8000ec4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d007      	beq.n	8000ec0 <FLASH_WaitForLastOperation+0x38>
 8000eb0:	f7ff fdde 	bl	8000a70 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d201      	bcs.n	8000ec4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e019      	b.n	8000ef8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <FLASH_WaitForLastOperation+0x7c>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1e8      	bne.n	8000ea2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <FLASH_WaitForLastOperation+0x7c>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <FLASH_WaitForLastOperation+0x7c>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <FLASH_WaitForLastOperation+0x7c>)
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000eee:	f000 f8a3 	bl	8001038 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
  
}  
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000074 	.word	0x20000074
 8000f04:	40023c00 	.word	0x40023c00

08000f08 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000f08:	b490      	push	{r4, r7}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <FLASH_Program_DoubleWord+0x5c>)
 8000f16:	691b      	ldr	r3, [r3, #16]
 8000f18:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <FLASH_Program_DoubleWord+0x5c>)
 8000f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000f20:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <FLASH_Program_DoubleWord+0x5c>)
 8000f22:	691b      	ldr	r3, [r3, #16]
 8000f24:	4a0f      	ldr	r2, [pc, #60]	; (8000f64 <FLASH_Program_DoubleWord+0x5c>)
 8000f26:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000f2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <FLASH_Program_DoubleWord+0x5c>)
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	4a0c      	ldr	r2, [pc, #48]	; (8000f64 <FLASH_Program_DoubleWord+0x5c>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	683a      	ldr	r2, [r7, #0]
 8000f3c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000f42:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000f46:	f04f 0300 	mov.w	r3, #0
 8000f4a:	f04f 0400 	mov.w	r4, #0
 8000f4e:	0013      	movs	r3, r2
 8000f50:	2400      	movs	r4, #0
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	3204      	adds	r2, #4
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc90      	pop	{r4, r7}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40023c00 	.word	0x40023c00

08000f68 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <FLASH_Program_Word+0x40>)
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	4a0c      	ldr	r2, [pc, #48]	; (8000fa8 <FLASH_Program_Word+0x40>)
 8000f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f7c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <FLASH_Program_Word+0x40>)
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	4a09      	ldr	r2, [pc, #36]	; (8000fa8 <FLASH_Program_Word+0x40>)
 8000f84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f88:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <FLASH_Program_Word+0x40>)
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <FLASH_Program_Word+0x40>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	601a      	str	r2, [r3, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	40023c00 	.word	0x40023c00

08000fac <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <FLASH_Program_HalfWord+0x44>)
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <FLASH_Program_HalfWord+0x44>)
 8000fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <FLASH_Program_HalfWord+0x44>)
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	4a09      	ldr	r2, [pc, #36]	; (8000ff0 <FLASH_Program_HalfWord+0x44>)
 8000fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <FLASH_Program_HalfWord+0x44>)
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <FLASH_Program_HalfWord+0x44>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	887a      	ldrh	r2, [r7, #2]
 8000fe0:	801a      	strh	r2, [r3, #0]
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40023c00 	.word	0x40023c00

08000ff4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <FLASH_Program_Byte+0x40>)
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <FLASH_Program_Byte+0x40>)
 8001006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800100a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <FLASH_Program_Byte+0x40>)
 800100e:	4a09      	ldr	r2, [pc, #36]	; (8001034 <FLASH_Program_Byte+0x40>)
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <FLASH_Program_Byte+0x40>)
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	4a06      	ldr	r2, [pc, #24]	; (8001034 <FLASH_Program_Byte+0x40>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	78fa      	ldrb	r2, [r7, #3]
 8001024:	701a      	strb	r2, [r3, #0]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40023c00 	.word	0x40023c00

08001038 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800103c:	4b27      	ldr	r3, [pc, #156]	; (80010dc <FLASH_SetErrorCode+0xa4>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	f003 0310 	and.w	r3, r3, #16
 8001044:	2b00      	cmp	r3, #0
 8001046:	d008      	beq.n	800105a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001048:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <FLASH_SetErrorCode+0xa8>)
 800104a:	69db      	ldr	r3, [r3, #28]
 800104c:	f043 0310 	orr.w	r3, r3, #16
 8001050:	4a23      	ldr	r2, [pc, #140]	; (80010e0 <FLASH_SetErrorCode+0xa8>)
 8001052:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001054:	4b21      	ldr	r3, [pc, #132]	; (80010dc <FLASH_SetErrorCode+0xa4>)
 8001056:	2210      	movs	r2, #16
 8001058:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <FLASH_SetErrorCode+0xa4>)
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	f003 0320 	and.w	r3, r3, #32
 8001062:	2b00      	cmp	r3, #0
 8001064:	d008      	beq.n	8001078 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001066:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <FLASH_SetErrorCode+0xa8>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	f043 0308 	orr.w	r3, r3, #8
 800106e:	4a1c      	ldr	r2, [pc, #112]	; (80010e0 <FLASH_SetErrorCode+0xa8>)
 8001070:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <FLASH_SetErrorCode+0xa4>)
 8001074:	2220      	movs	r2, #32
 8001076:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <FLASH_SetErrorCode+0xa4>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001080:	2b00      	cmp	r3, #0
 8001082:	d008      	beq.n	8001096 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <FLASH_SetErrorCode+0xa8>)
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	4a14      	ldr	r2, [pc, #80]	; (80010e0 <FLASH_SetErrorCode+0xa8>)
 800108e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <FLASH_SetErrorCode+0xa4>)
 8001092:	2240      	movs	r2, #64	; 0x40
 8001094:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <FLASH_SetErrorCode+0xa4>)
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d008      	beq.n	80010b4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80010a2:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <FLASH_SetErrorCode+0xa8>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	f043 0302 	orr.w	r3, r3, #2
 80010aa:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <FLASH_SetErrorCode+0xa8>)
 80010ac:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <FLASH_SetErrorCode+0xa4>)
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <FLASH_SetErrorCode+0xa4>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d008      	beq.n	80010d2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <FLASH_SetErrorCode+0xa8>)
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	f043 0320 	orr.w	r3, r3, #32
 80010c8:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <FLASH_SetErrorCode+0xa8>)
 80010ca:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <FLASH_SetErrorCode+0xa4>)
 80010ce:	2202      	movs	r2, #2
 80010d0:	60da      	str	r2, [r3, #12]
  }
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	40023c00 	.word	0x40023c00
 80010e0:	20000074 	.word	0x20000074

080010e4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80010f6:	4b31      	ldr	r3, [pc, #196]	; (80011bc <HAL_FLASHEx_Erase+0xd8>)
 80010f8:	7e1b      	ldrb	r3, [r3, #24]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <HAL_FLASHEx_Erase+0x1e>
 80010fe:	2302      	movs	r3, #2
 8001100:	e058      	b.n	80011b4 <HAL_FLASHEx_Erase+0xd0>
 8001102:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <HAL_FLASHEx_Erase+0xd8>)
 8001104:	2201      	movs	r2, #1
 8001106:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001108:	f24c 3050 	movw	r0, #50000	; 0xc350
 800110c:	f7ff febc 	bl	8000e88 <FLASH_WaitForLastOperation>
 8001110:	4603      	mov	r3, r0
 8001112:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d148      	bne.n	80011ac <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	f04f 32ff 	mov.w	r2, #4294967295
 8001120:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d115      	bne.n	8001156 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	4619      	mov	r1, r3
 8001136:	4610      	mov	r0, r2
 8001138:	f000 f844 	bl	80011c4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800113c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001140:	f7ff fea2 	bl	8000e88 <FLASH_WaitForLastOperation>
 8001144:	4603      	mov	r3, r0
 8001146:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001148:	4b1d      	ldr	r3, [pc, #116]	; (80011c0 <HAL_FLASHEx_Erase+0xdc>)
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	4a1c      	ldr	r2, [pc, #112]	; (80011c0 <HAL_FLASHEx_Erase+0xdc>)
 800114e:	f023 0304 	bic.w	r3, r3, #4
 8001152:	6113      	str	r3, [r2, #16]
 8001154:	e028      	b.n	80011a8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	e01c      	b.n	8001198 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	4619      	mov	r1, r3
 8001166:	68b8      	ldr	r0, [r7, #8]
 8001168:	f000 f850 	bl	800120c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800116c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001170:	f7ff fe8a 	bl	8000e88 <FLASH_WaitForLastOperation>
 8001174:	4603      	mov	r3, r0
 8001176:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_FLASHEx_Erase+0xdc>)
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <HAL_FLASHEx_Erase+0xdc>)
 800117e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001182:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	601a      	str	r2, [r3, #0]
          break;
 8001190:	e00a      	b.n	80011a8 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	3301      	adds	r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68da      	ldr	r2, [r3, #12]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	4413      	add	r3, r2
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d3da      	bcc.n	800115e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80011a8:	f000 f878 	bl	800129c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <HAL_FLASHEx_Erase+0xd8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	761a      	strb	r2, [r3, #24]

  return status;
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000074 	.word	0x20000074
 80011c0:	40023c00 	.word	0x40023c00

080011c4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80011d0:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <FLASH_MassErase+0x44>)
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	4a0c      	ldr	r2, [pc, #48]	; (8001208 <FLASH_MassErase+0x44>)
 80011d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <FLASH_MassErase+0x44>)
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	4a09      	ldr	r2, [pc, #36]	; (8001208 <FLASH_MassErase+0x44>)
 80011e2:	f043 0304 	orr.w	r3, r3, #4
 80011e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <FLASH_MassErase+0x44>)
 80011ea:	691a      	ldr	r2, [r3, #16]
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	4313      	orrs	r3, r2
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <FLASH_MassErase+0x44>)
 80011f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f8:	6113      	str	r3, [r2, #16]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023c00 	.word	0x40023c00

0800120c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d102      	bne.n	8001228 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	e010      	b.n	800124a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001228:	78fb      	ldrb	r3, [r7, #3]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d103      	bne.n	8001236 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800122e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	e009      	b.n	800124a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001236:	78fb      	ldrb	r3, [r7, #3]
 8001238:	2b02      	cmp	r3, #2
 800123a:	d103      	bne.n	8001244 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800123c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	e002      	b.n	800124a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001244:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001248:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <FLASH_Erase_Sector+0x8c>)
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	4a12      	ldr	r2, [pc, #72]	; (8001298 <FLASH_Erase_Sector+0x8c>)
 8001250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001254:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <FLASH_Erase_Sector+0x8c>)
 8001258:	691a      	ldr	r2, [r3, #16]
 800125a:	490f      	ldr	r1, [pc, #60]	; (8001298 <FLASH_Erase_Sector+0x8c>)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4313      	orrs	r3, r2
 8001260:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <FLASH_Erase_Sector+0x8c>)
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	4a0c      	ldr	r2, [pc, #48]	; (8001298 <FLASH_Erase_Sector+0x8c>)
 8001268:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800126c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <FLASH_Erase_Sector+0x8c>)
 8001270:	691a      	ldr	r2, [r3, #16]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	4313      	orrs	r3, r2
 8001278:	4a07      	ldr	r2, [pc, #28]	; (8001298 <FLASH_Erase_Sector+0x8c>)
 800127a:	f043 0302 	orr.w	r3, r3, #2
 800127e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <FLASH_Erase_Sector+0x8c>)
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	4a04      	ldr	r2, [pc, #16]	; (8001298 <FLASH_Erase_Sector+0x8c>)
 8001286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800128a:	6113      	str	r3, [r2, #16]
}
 800128c:	bf00      	nop
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	40023c00 	.word	0x40023c00

0800129c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80012a0:	4b20      	ldr	r3, [pc, #128]	; (8001324 <FLASH_FlushCaches+0x88>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d017      	beq.n	80012dc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80012ac:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <FLASH_FlushCaches+0x88>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a1c      	ldr	r2, [pc, #112]	; (8001324 <FLASH_FlushCaches+0x88>)
 80012b2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80012b6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <FLASH_FlushCaches+0x88>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a19      	ldr	r2, [pc, #100]	; (8001324 <FLASH_FlushCaches+0x88>)
 80012be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <FLASH_FlushCaches+0x88>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a16      	ldr	r2, [pc, #88]	; (8001324 <FLASH_FlushCaches+0x88>)
 80012ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012ce:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <FLASH_FlushCaches+0x88>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a13      	ldr	r2, [pc, #76]	; (8001324 <FLASH_FlushCaches+0x88>)
 80012d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012da:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <FLASH_FlushCaches+0x88>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d017      	beq.n	8001318 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80012e8:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <FLASH_FlushCaches+0x88>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <FLASH_FlushCaches+0x88>)
 80012ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012f2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <FLASH_FlushCaches+0x88>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <FLASH_FlushCaches+0x88>)
 80012fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <FLASH_FlushCaches+0x88>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a07      	ldr	r2, [pc, #28]	; (8001324 <FLASH_FlushCaches+0x88>)
 8001306:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800130a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <FLASH_FlushCaches+0x88>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a04      	ldr	r2, [pc, #16]	; (8001324 <FLASH_FlushCaches+0x88>)
 8001312:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001316:	6013      	str	r3, [r2, #0]
  }
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40023c00 	.word	0x40023c00

08001328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	; 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
 8001342:	e16b      	b.n	800161c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001344:	2201      	movs	r2, #1
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	429a      	cmp	r2, r3
 800135e:	f040 815a 	bne.w	8001616 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d00b      	beq.n	8001382 <HAL_GPIO_Init+0x5a>
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d007      	beq.n	8001382 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001376:	2b11      	cmp	r3, #17
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b12      	cmp	r3, #18
 8001380:	d130      	bne.n	80013e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2203      	movs	r2, #3
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013b8:	2201      	movs	r2, #1
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	f003 0201 	and.w	r2, r3, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0xfc>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b12      	cmp	r3, #18
 8001422:	d123      	bne.n	800146c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	08da      	lsrs	r2, r3, #3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3208      	adds	r2, #8
 800142c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	220f      	movs	r2, #15
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	691a      	ldr	r2, [r3, #16]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	08da      	lsrs	r2, r3, #3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3208      	adds	r2, #8
 8001466:	69b9      	ldr	r1, [r7, #24]
 8001468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	2203      	movs	r2, #3
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0203 	and.w	r2, r3, #3
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 80b4 	beq.w	8001616 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b5f      	ldr	r3, [pc, #380]	; (8001630 <HAL_GPIO_Init+0x308>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	4a5e      	ldr	r2, [pc, #376]	; (8001630 <HAL_GPIO_Init+0x308>)
 80014b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014bc:	6453      	str	r3, [r2, #68]	; 0x44
 80014be:	4b5c      	ldr	r3, [pc, #368]	; (8001630 <HAL_GPIO_Init+0x308>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ca:	4a5a      	ldr	r2, [pc, #360]	; (8001634 <HAL_GPIO_Init+0x30c>)
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	089b      	lsrs	r3, r3, #2
 80014d0:	3302      	adds	r3, #2
 80014d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f003 0303 	and.w	r3, r3, #3
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	220f      	movs	r2, #15
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a51      	ldr	r2, [pc, #324]	; (8001638 <HAL_GPIO_Init+0x310>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d02b      	beq.n	800154e <HAL_GPIO_Init+0x226>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a50      	ldr	r2, [pc, #320]	; (800163c <HAL_GPIO_Init+0x314>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d025      	beq.n	800154a <HAL_GPIO_Init+0x222>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4f      	ldr	r2, [pc, #316]	; (8001640 <HAL_GPIO_Init+0x318>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d01f      	beq.n	8001546 <HAL_GPIO_Init+0x21e>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a4e      	ldr	r2, [pc, #312]	; (8001644 <HAL_GPIO_Init+0x31c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d019      	beq.n	8001542 <HAL_GPIO_Init+0x21a>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a4d      	ldr	r2, [pc, #308]	; (8001648 <HAL_GPIO_Init+0x320>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d013      	beq.n	800153e <HAL_GPIO_Init+0x216>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a4c      	ldr	r2, [pc, #304]	; (800164c <HAL_GPIO_Init+0x324>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d00d      	beq.n	800153a <HAL_GPIO_Init+0x212>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a4b      	ldr	r2, [pc, #300]	; (8001650 <HAL_GPIO_Init+0x328>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d007      	beq.n	8001536 <HAL_GPIO_Init+0x20e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4a      	ldr	r2, [pc, #296]	; (8001654 <HAL_GPIO_Init+0x32c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d101      	bne.n	8001532 <HAL_GPIO_Init+0x20a>
 800152e:	2307      	movs	r3, #7
 8001530:	e00e      	b.n	8001550 <HAL_GPIO_Init+0x228>
 8001532:	2308      	movs	r3, #8
 8001534:	e00c      	b.n	8001550 <HAL_GPIO_Init+0x228>
 8001536:	2306      	movs	r3, #6
 8001538:	e00a      	b.n	8001550 <HAL_GPIO_Init+0x228>
 800153a:	2305      	movs	r3, #5
 800153c:	e008      	b.n	8001550 <HAL_GPIO_Init+0x228>
 800153e:	2304      	movs	r3, #4
 8001540:	e006      	b.n	8001550 <HAL_GPIO_Init+0x228>
 8001542:	2303      	movs	r3, #3
 8001544:	e004      	b.n	8001550 <HAL_GPIO_Init+0x228>
 8001546:	2302      	movs	r3, #2
 8001548:	e002      	b.n	8001550 <HAL_GPIO_Init+0x228>
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <HAL_GPIO_Init+0x228>
 800154e:	2300      	movs	r3, #0
 8001550:	69fa      	ldr	r2, [r7, #28]
 8001552:	f002 0203 	and.w	r2, r2, #3
 8001556:	0092      	lsls	r2, r2, #2
 8001558:	4093      	lsls	r3, r2
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001560:	4934      	ldr	r1, [pc, #208]	; (8001634 <HAL_GPIO_Init+0x30c>)
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	089b      	lsrs	r3, r3, #2
 8001566:	3302      	adds	r3, #2
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800156e:	4b3a      	ldr	r3, [pc, #232]	; (8001658 <HAL_GPIO_Init+0x330>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001592:	4a31      	ldr	r2, [pc, #196]	; (8001658 <HAL_GPIO_Init+0x330>)
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001598:	4b2f      	ldr	r3, [pc, #188]	; (8001658 <HAL_GPIO_Init+0x330>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015bc:	4a26      	ldr	r2, [pc, #152]	; (8001658 <HAL_GPIO_Init+0x330>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015c2:	4b25      	ldr	r3, [pc, #148]	; (8001658 <HAL_GPIO_Init+0x330>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015e6:	4a1c      	ldr	r2, [pc, #112]	; (8001658 <HAL_GPIO_Init+0x330>)
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <HAL_GPIO_Init+0x330>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001610:	4a11      	ldr	r2, [pc, #68]	; (8001658 <HAL_GPIO_Init+0x330>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3301      	adds	r3, #1
 800161a:	61fb      	str	r3, [r7, #28]
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	2b0f      	cmp	r3, #15
 8001620:	f67f ae90 	bls.w	8001344 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001624:	bf00      	nop
 8001626:	3724      	adds	r7, #36	; 0x24
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	40023800 	.word	0x40023800
 8001634:	40013800 	.word	0x40013800
 8001638:	40020000 	.word	0x40020000
 800163c:	40020400 	.word	0x40020400
 8001640:	40020800 	.word	0x40020800
 8001644:	40020c00 	.word	0x40020c00
 8001648:	40021000 	.word	0x40021000
 800164c:	40021400 	.word	0x40021400
 8001650:	40021800 	.word	0x40021800
 8001654:	40021c00 	.word	0x40021c00
 8001658:	40013c00 	.word	0x40013c00

0800165c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691a      	ldr	r2, [r3, #16]
 800166c:	887b      	ldrh	r3, [r7, #2]
 800166e:	4013      	ands	r3, r2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001674:	2301      	movs	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e001      	b.n	800167e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001698:	695a      	ldr	r2, [r3, #20]
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	4013      	ands	r3, r2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d006      	beq.n	80016b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 f806 	bl	80016bc <HAL_GPIO_EXTI_Callback>
  }
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40013c00 	.word	0x40013c00

080016bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
	...

080016d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e25b      	b.n	8001b9e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d075      	beq.n	80017de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016f2:	4ba3      	ldr	r3, [pc, #652]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	d00c      	beq.n	8001718 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016fe:	4ba0      	ldr	r3, [pc, #640]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001706:	2b08      	cmp	r3, #8
 8001708:	d112      	bne.n	8001730 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800170a:	4b9d      	ldr	r3, [pc, #628]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001716:	d10b      	bne.n	8001730 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001718:	4b99      	ldr	r3, [pc, #612]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d05b      	beq.n	80017dc <HAL_RCC_OscConfig+0x108>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d157      	bne.n	80017dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e236      	b.n	8001b9e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001738:	d106      	bne.n	8001748 <HAL_RCC_OscConfig+0x74>
 800173a:	4b91      	ldr	r3, [pc, #580]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a90      	ldr	r2, [pc, #576]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 8001740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	e01d      	b.n	8001784 <HAL_RCC_OscConfig+0xb0>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001750:	d10c      	bne.n	800176c <HAL_RCC_OscConfig+0x98>
 8001752:	4b8b      	ldr	r3, [pc, #556]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a8a      	ldr	r2, [pc, #552]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 8001758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	4b88      	ldr	r3, [pc, #544]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a87      	ldr	r2, [pc, #540]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 8001764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	e00b      	b.n	8001784 <HAL_RCC_OscConfig+0xb0>
 800176c:	4b84      	ldr	r3, [pc, #528]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a83      	ldr	r2, [pc, #524]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 8001772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	4b81      	ldr	r3, [pc, #516]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a80      	ldr	r2, [pc, #512]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 800177e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d013      	beq.n	80017b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178c:	f7ff f970 	bl	8000a70 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001794:	f7ff f96c 	bl	8000a70 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b64      	cmp	r3, #100	; 0x64
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e1fb      	b.n	8001b9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a6:	4b76      	ldr	r3, [pc, #472]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0xc0>
 80017b2:	e014      	b.n	80017de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff f95c 	bl	8000a70 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017bc:	f7ff f958 	bl	8000a70 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b64      	cmp	r3, #100	; 0x64
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e1e7      	b.n	8001b9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ce:	4b6c      	ldr	r3, [pc, #432]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0xe8>
 80017da:	e000      	b.n	80017de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d063      	beq.n	80018b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ea:	4b65      	ldr	r3, [pc, #404]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00b      	beq.n	800180e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017f6:	4b62      	ldr	r3, [pc, #392]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d11c      	bne.n	800183c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001802:	4b5f      	ldr	r3, [pc, #380]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d116      	bne.n	800183c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180e:	4b5c      	ldr	r3, [pc, #368]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d005      	beq.n	8001826 <HAL_RCC_OscConfig+0x152>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d001      	beq.n	8001826 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e1bb      	b.n	8001b9e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001826:	4b56      	ldr	r3, [pc, #344]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4952      	ldr	r1, [pc, #328]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183a:	e03a      	b.n	80018b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d020      	beq.n	8001886 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001844:	4b4f      	ldr	r3, [pc, #316]	; (8001984 <HAL_RCC_OscConfig+0x2b0>)
 8001846:	2201      	movs	r2, #1
 8001848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184a:	f7ff f911 	bl	8000a70 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001852:	f7ff f90d 	bl	8000a70 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e19c      	b.n	8001b9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001864:	4b46      	ldr	r3, [pc, #280]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001870:	4b43      	ldr	r3, [pc, #268]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4940      	ldr	r1, [pc, #256]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 8001880:	4313      	orrs	r3, r2
 8001882:	600b      	str	r3, [r1, #0]
 8001884:	e015      	b.n	80018b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001886:	4b3f      	ldr	r3, [pc, #252]	; (8001984 <HAL_RCC_OscConfig+0x2b0>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff f8f0 	bl	8000a70 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001894:	f7ff f8ec 	bl	8000a70 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e17b      	b.n	8001b9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a6:	4b36      	ldr	r3, [pc, #216]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d030      	beq.n	8001920 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d016      	beq.n	80018f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018c6:	4b30      	ldr	r3, [pc, #192]	; (8001988 <HAL_RCC_OscConfig+0x2b4>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018cc:	f7ff f8d0 	bl	8000a70 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d4:	f7ff f8cc 	bl	8000a70 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e15b      	b.n	8001b9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e6:	4b26      	ldr	r3, [pc, #152]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 80018e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0x200>
 80018f2:	e015      	b.n	8001920 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f4:	4b24      	ldr	r3, [pc, #144]	; (8001988 <HAL_RCC_OscConfig+0x2b4>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fa:	f7ff f8b9 	bl	8000a70 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001902:	f7ff f8b5 	bl	8000a70 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e144      	b.n	8001b9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001914:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 8001916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f0      	bne.n	8001902 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 80a0 	beq.w	8001a6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800192e:	2300      	movs	r3, #0
 8001930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10f      	bne.n	800195e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <HAL_RCC_OscConfig+0x2ac>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800195a:	2301      	movs	r3, #1
 800195c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195e:	4b0b      	ldr	r3, [pc, #44]	; (800198c <HAL_RCC_OscConfig+0x2b8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001966:	2b00      	cmp	r3, #0
 8001968:	d121      	bne.n	80019ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <HAL_RCC_OscConfig+0x2b8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a07      	ldr	r2, [pc, #28]	; (800198c <HAL_RCC_OscConfig+0x2b8>)
 8001970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001976:	f7ff f87b 	bl	8000a70 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197c:	e011      	b.n	80019a2 <HAL_RCC_OscConfig+0x2ce>
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	42470000 	.word	0x42470000
 8001988:	42470e80 	.word	0x42470e80
 800198c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001990:	f7ff f86e 	bl	8000a70 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e0fd      	b.n	8001b9e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a2:	4b81      	ldr	r3, [pc, #516]	; (8001ba8 <HAL_RCC_OscConfig+0x4d4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d106      	bne.n	80019c4 <HAL_RCC_OscConfig+0x2f0>
 80019b6:	4b7d      	ldr	r3, [pc, #500]	; (8001bac <HAL_RCC_OscConfig+0x4d8>)
 80019b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ba:	4a7c      	ldr	r2, [pc, #496]	; (8001bac <HAL_RCC_OscConfig+0x4d8>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6713      	str	r3, [r2, #112]	; 0x70
 80019c2:	e01c      	b.n	80019fe <HAL_RCC_OscConfig+0x32a>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b05      	cmp	r3, #5
 80019ca:	d10c      	bne.n	80019e6 <HAL_RCC_OscConfig+0x312>
 80019cc:	4b77      	ldr	r3, [pc, #476]	; (8001bac <HAL_RCC_OscConfig+0x4d8>)
 80019ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d0:	4a76      	ldr	r2, [pc, #472]	; (8001bac <HAL_RCC_OscConfig+0x4d8>)
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	6713      	str	r3, [r2, #112]	; 0x70
 80019d8:	4b74      	ldr	r3, [pc, #464]	; (8001bac <HAL_RCC_OscConfig+0x4d8>)
 80019da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019dc:	4a73      	ldr	r2, [pc, #460]	; (8001bac <HAL_RCC_OscConfig+0x4d8>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6713      	str	r3, [r2, #112]	; 0x70
 80019e4:	e00b      	b.n	80019fe <HAL_RCC_OscConfig+0x32a>
 80019e6:	4b71      	ldr	r3, [pc, #452]	; (8001bac <HAL_RCC_OscConfig+0x4d8>)
 80019e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ea:	4a70      	ldr	r2, [pc, #448]	; (8001bac <HAL_RCC_OscConfig+0x4d8>)
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	6713      	str	r3, [r2, #112]	; 0x70
 80019f2:	4b6e      	ldr	r3, [pc, #440]	; (8001bac <HAL_RCC_OscConfig+0x4d8>)
 80019f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f6:	4a6d      	ldr	r2, [pc, #436]	; (8001bac <HAL_RCC_OscConfig+0x4d8>)
 80019f8:	f023 0304 	bic.w	r3, r3, #4
 80019fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d015      	beq.n	8001a32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a06:	f7ff f833 	bl	8000a70 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0c:	e00a      	b.n	8001a24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0e:	f7ff f82f 	bl	8000a70 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e0bc      	b.n	8001b9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a24:	4b61      	ldr	r3, [pc, #388]	; (8001bac <HAL_RCC_OscConfig+0x4d8>)
 8001a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0ee      	beq.n	8001a0e <HAL_RCC_OscConfig+0x33a>
 8001a30:	e014      	b.n	8001a5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a32:	f7ff f81d 	bl	8000a70 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a38:	e00a      	b.n	8001a50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a3a:	f7ff f819 	bl	8000a70 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e0a6      	b.n	8001b9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a50:	4b56      	ldr	r3, [pc, #344]	; (8001bac <HAL_RCC_OscConfig+0x4d8>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1ee      	bne.n	8001a3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a5c:	7dfb      	ldrb	r3, [r7, #23]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d105      	bne.n	8001a6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a62:	4b52      	ldr	r3, [pc, #328]	; (8001bac <HAL_RCC_OscConfig+0x4d8>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	4a51      	ldr	r2, [pc, #324]	; (8001bac <HAL_RCC_OscConfig+0x4d8>)
 8001a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 8092 	beq.w	8001b9c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a78:	4b4c      	ldr	r3, [pc, #304]	; (8001bac <HAL_RCC_OscConfig+0x4d8>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d05c      	beq.n	8001b3e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d141      	bne.n	8001b10 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8c:	4b48      	ldr	r3, [pc, #288]	; (8001bb0 <HAL_RCC_OscConfig+0x4dc>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a92:	f7fe ffed 	bl	8000a70 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9a:	f7fe ffe9 	bl	8000a70 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e078      	b.n	8001b9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aac:	4b3f      	ldr	r3, [pc, #252]	; (8001bac <HAL_RCC_OscConfig+0x4d8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1f0      	bne.n	8001a9a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69da      	ldr	r2, [r3, #28]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	019b      	lsls	r3, r3, #6
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ace:	085b      	lsrs	r3, r3, #1
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	041b      	lsls	r3, r3, #16
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ada:	061b      	lsls	r3, r3, #24
 8001adc:	4933      	ldr	r1, [pc, #204]	; (8001bac <HAL_RCC_OscConfig+0x4d8>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae2:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <HAL_RCC_OscConfig+0x4dc>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7fe ffc2 	bl	8000a70 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af0:	f7fe ffbe 	bl	8000a70 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e04d      	b.n	8001b9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b02:	4b2a      	ldr	r3, [pc, #168]	; (8001bac <HAL_RCC_OscConfig+0x4d8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0x41c>
 8001b0e:	e045      	b.n	8001b9c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b10:	4b27      	ldr	r3, [pc, #156]	; (8001bb0 <HAL_RCC_OscConfig+0x4dc>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7fe ffab 	bl	8000a70 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7fe ffa7 	bl	8000a70 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e036      	b.n	8001b9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b30:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <HAL_RCC_OscConfig+0x4d8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f0      	bne.n	8001b1e <HAL_RCC_OscConfig+0x44a>
 8001b3c:	e02e      	b.n	8001b9c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e029      	b.n	8001b9e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b4a:	4b18      	ldr	r3, [pc, #96]	; (8001bac <HAL_RCC_OscConfig+0x4d8>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d11c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d115      	bne.n	8001b98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b72:	4013      	ands	r3, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d10d      	bne.n	8001b98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d106      	bne.n	8001b98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d001      	beq.n	8001b9c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40007000 	.word	0x40007000
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	42470060 	.word	0x42470060

08001bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0cc      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b68      	ldr	r3, [pc, #416]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 030f 	and.w	r3, r3, #15
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d90c      	bls.n	8001bf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b65      	ldr	r3, [pc, #404]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b63      	ldr	r3, [pc, #396]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0b8      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d020      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c08:	4b59      	ldr	r3, [pc, #356]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	4a58      	ldr	r2, [pc, #352]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c20:	4b53      	ldr	r3, [pc, #332]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	4a52      	ldr	r2, [pc, #328]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c2c:	4b50      	ldr	r3, [pc, #320]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	494d      	ldr	r1, [pc, #308]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d044      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c52:	4b47      	ldr	r3, [pc, #284]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d119      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e07f      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d003      	beq.n	8001c72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c72:	4b3f      	ldr	r3, [pc, #252]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d109      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e06f      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c82:	4b3b      	ldr	r3, [pc, #236]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e067      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c92:	4b37      	ldr	r3, [pc, #220]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f023 0203 	bic.w	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	4934      	ldr	r1, [pc, #208]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca4:	f7fe fee4 	bl	8000a70 <HAL_GetTick>
 8001ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cac:	f7fe fee0 	bl	8000a70 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e04f      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc2:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 020c 	and.w	r2, r3, #12
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d1eb      	bne.n	8001cac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd4:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 030f 	and.w	r3, r3, #15
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d20c      	bcs.n	8001cfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cea:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <HAL_RCC_ClockConfig+0x1b8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e032      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	4916      	ldr	r1, [pc, #88]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d009      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d26:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	490e      	ldr	r1, [pc, #56]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d3a:	f000 f821 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8001d3e:	4601      	mov	r1, r0
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4c:	5cd3      	ldrb	r3, [r2, r3]
 8001d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8001d52:	4a09      	ldr	r2, [pc, #36]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fe44 	bl	80009e8 <HAL_InitTick>

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023c00 	.word	0x40023c00
 8001d70:	40023800 	.word	0x40023800
 8001d74:	0800319c 	.word	0x0800319c
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	20000004 	.word	0x20000004

08001d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d96:	4b63      	ldr	r3, [pc, #396]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d007      	beq.n	8001db2 <HAL_RCC_GetSysClockFreq+0x32>
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d008      	beq.n	8001db8 <HAL_RCC_GetSysClockFreq+0x38>
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f040 80b4 	bne.w	8001f14 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dac:	4b5e      	ldr	r3, [pc, #376]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001dae:	60bb      	str	r3, [r7, #8]
       break;
 8001db0:	e0b3      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001db2:	4b5e      	ldr	r3, [pc, #376]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001db4:	60bb      	str	r3, [r7, #8]
      break;
 8001db6:	e0b0      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001db8:	4b5a      	ldr	r3, [pc, #360]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dc0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dc2:	4b58      	ldr	r3, [pc, #352]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d04a      	beq.n	8001e64 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dce:	4b55      	ldr	r3, [pc, #340]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	099b      	lsrs	r3, r3, #6
 8001dd4:	f04f 0400 	mov.w	r4, #0
 8001dd8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	ea03 0501 	and.w	r5, r3, r1
 8001de4:	ea04 0602 	and.w	r6, r4, r2
 8001de8:	4629      	mov	r1, r5
 8001dea:	4632      	mov	r2, r6
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	f04f 0400 	mov.w	r4, #0
 8001df4:	0154      	lsls	r4, r2, #5
 8001df6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001dfa:	014b      	lsls	r3, r1, #5
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4622      	mov	r2, r4
 8001e00:	1b49      	subs	r1, r1, r5
 8001e02:	eb62 0206 	sbc.w	r2, r2, r6
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	f04f 0400 	mov.w	r4, #0
 8001e0e:	0194      	lsls	r4, r2, #6
 8001e10:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e14:	018b      	lsls	r3, r1, #6
 8001e16:	1a5b      	subs	r3, r3, r1
 8001e18:	eb64 0402 	sbc.w	r4, r4, r2
 8001e1c:	f04f 0100 	mov.w	r1, #0
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	00e2      	lsls	r2, r4, #3
 8001e26:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e2a:	00d9      	lsls	r1, r3, #3
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4614      	mov	r4, r2
 8001e30:	195b      	adds	r3, r3, r5
 8001e32:	eb44 0406 	adc.w	r4, r4, r6
 8001e36:	f04f 0100 	mov.w	r1, #0
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	0262      	lsls	r2, r4, #9
 8001e40:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001e44:	0259      	lsls	r1, r3, #9
 8001e46:	460b      	mov	r3, r1
 8001e48:	4614      	mov	r4, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	4621      	mov	r1, r4
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f04f 0400 	mov.w	r4, #0
 8001e54:	461a      	mov	r2, r3
 8001e56:	4623      	mov	r3, r4
 8001e58:	f7fe f9b6 	bl	80001c8 <__aeabi_uldivmod>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	460c      	mov	r4, r1
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	e049      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e64:	4b2f      	ldr	r3, [pc, #188]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	099b      	lsrs	r3, r3, #6
 8001e6a:	f04f 0400 	mov.w	r4, #0
 8001e6e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	ea03 0501 	and.w	r5, r3, r1
 8001e7a:	ea04 0602 	and.w	r6, r4, r2
 8001e7e:	4629      	mov	r1, r5
 8001e80:	4632      	mov	r2, r6
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	f04f 0400 	mov.w	r4, #0
 8001e8a:	0154      	lsls	r4, r2, #5
 8001e8c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e90:	014b      	lsls	r3, r1, #5
 8001e92:	4619      	mov	r1, r3
 8001e94:	4622      	mov	r2, r4
 8001e96:	1b49      	subs	r1, r1, r5
 8001e98:	eb62 0206 	sbc.w	r2, r2, r6
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	f04f 0400 	mov.w	r4, #0
 8001ea4:	0194      	lsls	r4, r2, #6
 8001ea6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001eaa:	018b      	lsls	r3, r1, #6
 8001eac:	1a5b      	subs	r3, r3, r1
 8001eae:	eb64 0402 	sbc.w	r4, r4, r2
 8001eb2:	f04f 0100 	mov.w	r1, #0
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	00e2      	lsls	r2, r4, #3
 8001ebc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ec0:	00d9      	lsls	r1, r3, #3
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4614      	mov	r4, r2
 8001ec6:	195b      	adds	r3, r3, r5
 8001ec8:	eb44 0406 	adc.w	r4, r4, r6
 8001ecc:	f04f 0100 	mov.w	r1, #0
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	02a2      	lsls	r2, r4, #10
 8001ed6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001eda:	0299      	lsls	r1, r3, #10
 8001edc:	460b      	mov	r3, r1
 8001ede:	4614      	mov	r4, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	4621      	mov	r1, r4
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f04f 0400 	mov.w	r4, #0
 8001eea:	461a      	mov	r2, r3
 8001eec:	4623      	mov	r3, r4
 8001eee:	f7fe f96b 	bl	80001c8 <__aeabi_uldivmod>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	460c      	mov	r4, r1
 8001ef6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	0c1b      	lsrs	r3, r3, #16
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	3301      	adds	r3, #1
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f10:	60bb      	str	r3, [r7, #8]
      break;
 8001f12:	e002      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f16:	60bb      	str	r3, [r7, #8]
      break;
 8001f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f24:	40023800 	.word	0x40023800
 8001f28:	00f42400 	.word	0x00f42400
 8001f2c:	007a1200 	.word	0x007a1200

08001f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f34:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000000 	.word	0x20000000

08001f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f4c:	f7ff fff0 	bl	8001f30 <HAL_RCC_GetHCLKFreq>
 8001f50:	4601      	mov	r1, r0
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	0a9b      	lsrs	r3, r3, #10
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	4a03      	ldr	r2, [pc, #12]	; (8001f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f5e:	5cd3      	ldrb	r3, [r2, r3]
 8001f60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	080031ac 	.word	0x080031ac

08001f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f74:	f7ff ffdc 	bl	8001f30 <HAL_RCC_GetHCLKFreq>
 8001f78:	4601      	mov	r1, r0
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	0b5b      	lsrs	r3, r3, #13
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	4a03      	ldr	r2, [pc, #12]	; (8001f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f86:	5cd3      	ldrb	r3, [r2, r3]
 8001f88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40023800 	.word	0x40023800
 8001f94:	080031ac 	.word	0x080031ac

08001f98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e03f      	b.n	800202a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d106      	bne.n	8001fc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe fbf0 	bl	80007a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2224      	movs	r2, #36	; 0x24
 8001fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 fbf1 	bl	80027c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ff0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695a      	ldr	r2, [r3, #20]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002000:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002010:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2220      	movs	r2, #32
 800201c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2220      	movs	r2, #32
 8002024:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b088      	sub	sp, #32
 8002036:	af02      	add	r7, sp, #8
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	4613      	mov	r3, r2
 8002040:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b20      	cmp	r3, #32
 8002050:	f040 8083 	bne.w	800215a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d002      	beq.n	8002060 <HAL_UART_Transmit+0x2e>
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e07b      	b.n	800215c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_UART_Transmit+0x40>
 800206e:	2302      	movs	r3, #2
 8002070:	e074      	b.n	800215c <HAL_UART_Transmit+0x12a>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2221      	movs	r2, #33	; 0x21
 8002084:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002088:	f7fe fcf2 	bl	8000a70 <HAL_GetTick>
 800208c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	88fa      	ldrh	r2, [r7, #6]
 8002092:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	88fa      	ldrh	r2, [r7, #6]
 8002098:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80020a2:	e042      	b.n	800212a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ba:	d122      	bne.n	8002102 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	2200      	movs	r2, #0
 80020c4:	2180      	movs	r1, #128	; 0x80
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 fa10 	bl	80024ec <UART_WaitOnFlagUntilTimeout>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e042      	b.n	800215c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020e8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d103      	bne.n	80020fa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	3302      	adds	r3, #2
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	e017      	b.n	800212a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	3301      	adds	r3, #1
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	e013      	b.n	800212a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2200      	movs	r2, #0
 800210a:	2180      	movs	r1, #128	; 0x80
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 f9ed 	bl	80024ec <UART_WaitOnFlagUntilTimeout>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e01f      	b.n	800215c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	60ba      	str	r2, [r7, #8]
 8002122:	781a      	ldrb	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800212e:	b29b      	uxth	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1b7      	bne.n	80020a4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2200      	movs	r2, #0
 800213c:	2140      	movs	r1, #64	; 0x40
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 f9d4 	bl	80024ec <UART_WaitOnFlagUntilTimeout>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e006      	b.n	800215c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2220      	movs	r2, #32
 8002152:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	e000      	b.n	800215c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800215a:	2302      	movs	r3, #2
  }
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af02      	add	r7, sp, #8
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	4613      	mov	r3, r2
 8002172:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b20      	cmp	r3, #32
 8002182:	f040 8090 	bne.w	80022a6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <HAL_UART_Receive+0x2e>
 800218c:	88fb      	ldrh	r3, [r7, #6]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e088      	b.n	80022a8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_UART_Receive+0x40>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e081      	b.n	80022a8 <HAL_UART_Receive+0x144>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2222      	movs	r2, #34	; 0x22
 80021b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80021ba:	f7fe fc59 	bl	8000a70 <HAL_GetTick>
 80021be:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	88fa      	ldrh	r2, [r7, #6]
 80021c4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	88fa      	ldrh	r2, [r7, #6]
 80021ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80021d4:	e05c      	b.n	8002290 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ec:	d12b      	bne.n	8002246 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2200      	movs	r2, #0
 80021f6:	2120      	movs	r1, #32
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 f977 	bl	80024ec <UART_WaitOnFlagUntilTimeout>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e04f      	b.n	80022a8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10c      	bne.n	800222e <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	b29b      	uxth	r3, r3
 800221c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002220:	b29a      	uxth	r2, r3
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	3302      	adds	r3, #2
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	e030      	b.n	8002290 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	b29b      	uxth	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	b29a      	uxth	r2, r3
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	3301      	adds	r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	e024      	b.n	8002290 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2200      	movs	r2, #0
 800224e:	2120      	movs	r1, #32
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f94b 	bl	80024ec <UART_WaitOnFlagUntilTimeout>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e023      	b.n	80022a8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d108      	bne.n	800227a <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6859      	ldr	r1, [r3, #4]
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	60ba      	str	r2, [r7, #8]
 8002274:	b2ca      	uxtb	r2, r1
 8002276:	701a      	strb	r2, [r3, #0]
 8002278:	e00a      	b.n	8002290 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	b2da      	uxtb	r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	1c59      	adds	r1, r3, #1
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002294:	b29b      	uxth	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d19d      	bne.n	80021d6 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2220      	movs	r2, #32
 800229e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	e000      	b.n	80022a8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80022a6:	2302      	movs	r3, #2
  }
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10d      	bne.n	8002302 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d008      	beq.n	8002302 <HAL_UART_IRQHandler+0x52>
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f9e0 	bl	80026c0 <UART_Receive_IT>
      return;
 8002300:	e0d1      	b.n	80024a6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 80b0 	beq.w	800246a <HAL_UART_IRQHandler+0x1ba>
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	d105      	bne.n	8002320 <HAL_UART_IRQHandler+0x70>
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 80a5 	beq.w	800246a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00a      	beq.n	8002340 <HAL_UART_IRQHandler+0x90>
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002338:	f043 0201 	orr.w	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00a      	beq.n	8002360 <HAL_UART_IRQHandler+0xb0>
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002358:	f043 0202 	orr.w	r2, r3, #2
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <HAL_UART_IRQHandler+0xd0>
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002378:	f043 0204 	orr.w	r2, r3, #4
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00f      	beq.n	80023aa <HAL_UART_IRQHandler+0xfa>
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	f003 0320 	and.w	r3, r3, #32
 8002390:	2b00      	cmp	r3, #0
 8002392:	d104      	bne.n	800239e <HAL_UART_IRQHandler+0xee>
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d005      	beq.n	80023aa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a2:	f043 0208 	orr.w	r2, r3, #8
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d078      	beq.n	80024a4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	f003 0320 	and.w	r3, r3, #32
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d007      	beq.n	80023cc <HAL_UART_IRQHandler+0x11c>
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	f003 0320 	and.w	r3, r3, #32
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f97a 	bl	80026c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d6:	2b40      	cmp	r3, #64	; 0x40
 80023d8:	bf0c      	ite	eq
 80023da:	2301      	moveq	r3, #1
 80023dc:	2300      	movne	r3, #0
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d102      	bne.n	80023f4 <HAL_UART_IRQHandler+0x144>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d031      	beq.n	8002458 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f8c3 	bl	8002580 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002404:	2b40      	cmp	r3, #64	; 0x40
 8002406:	d123      	bne.n	8002450 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695a      	ldr	r2, [r3, #20]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002416:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241c:	2b00      	cmp	r3, #0
 800241e:	d013      	beq.n	8002448 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002424:	4a21      	ldr	r2, [pc, #132]	; (80024ac <HAL_UART_IRQHandler+0x1fc>)
 8002426:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe fc83 	bl	8000d38 <HAL_DMA_Abort_IT>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d016      	beq.n	8002466 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002442:	4610      	mov	r0, r2
 8002444:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002446:	e00e      	b.n	8002466 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f845 	bl	80024d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800244e:	e00a      	b.n	8002466 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f841 	bl	80024d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002456:	e006      	b.n	8002466 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f83d 	bl	80024d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002464:	e01e      	b.n	80024a4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002466:	bf00      	nop
    return;
 8002468:	e01c      	b.n	80024a4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_UART_IRQHandler+0x1d6>
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f8b0 	bl	80025e4 <UART_Transmit_IT>
    return;
 8002484:	e00f      	b.n	80024a6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_UART_IRQHandler+0x1f6>
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f8f8 	bl	8002690 <UART_EndTransmit_IT>
    return;
 80024a0:	bf00      	nop
 80024a2:	e000      	b.n	80024a6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80024a4:	bf00      	nop
  }
}
 80024a6:	3720      	adds	r7, #32
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	080025bd 	.word	0x080025bd

080024b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	4613      	mov	r3, r2
 80024fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024fc:	e02c      	b.n	8002558 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002504:	d028      	beq.n	8002558 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d007      	beq.n	800251c <UART_WaitOnFlagUntilTimeout+0x30>
 800250c:	f7fe fab0 	bl	8000a70 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	429a      	cmp	r2, r3
 800251a:	d21d      	bcs.n	8002558 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800252a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695a      	ldr	r2, [r3, #20]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0201 	bic.w	r2, r2, #1
 800253a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2220      	movs	r2, #32
 8002548:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e00f      	b.n	8002578 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	4013      	ands	r3, r2
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	429a      	cmp	r2, r3
 8002566:	bf0c      	ite	eq
 8002568:	2301      	moveq	r3, #1
 800256a:	2300      	movne	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	461a      	mov	r2, r3
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	429a      	cmp	r2, r3
 8002574:	d0c3      	beq.n	80024fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002596:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695a      	ldr	r2, [r3, #20]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0201 	bic.w	r2, r2, #1
 80025a6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f7ff ff7e 	bl	80024d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025dc:	bf00      	nop
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b21      	cmp	r3, #33	; 0x21
 80025f6:	d144      	bne.n	8002682 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002600:	d11a      	bne.n	8002638 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002616:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d105      	bne.n	800262c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	1c9a      	adds	r2, r3, #2
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	621a      	str	r2, [r3, #32]
 800262a:	e00e      	b.n	800264a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	621a      	str	r2, [r3, #32]
 8002636:	e008      	b.n	800264a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	1c59      	adds	r1, r3, #1
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6211      	str	r1, [r2, #32]
 8002642:	781a      	ldrb	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b29b      	uxth	r3, r3
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	4619      	mov	r1, r3
 8002658:	84d1      	strh	r1, [r2, #38]	; 0x26
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10f      	bne.n	800267e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800266c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800267c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	e000      	b.n	8002684 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002682:	2302      	movs	r3, #2
  }
}
 8002684:	4618      	mov	r0, r3
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff fefd 	bl	80024b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b22      	cmp	r3, #34	; 0x22
 80026d2:	d171      	bne.n	80027b8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026dc:	d123      	bne.n	8002726 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10e      	bne.n	800270a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002702:	1c9a      	adds	r2, r3, #2
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	629a      	str	r2, [r3, #40]	; 0x28
 8002708:	e029      	b.n	800275e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	b29b      	uxth	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	629a      	str	r2, [r3, #40]	; 0x28
 8002724:	e01b      	b.n	800275e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10a      	bne.n	8002744 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6858      	ldr	r0, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	1c59      	adds	r1, r3, #1
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6291      	str	r1, [r2, #40]	; 0x28
 800273e:	b2c2      	uxtb	r2, r0
 8002740:	701a      	strb	r2, [r3, #0]
 8002742:	e00c      	b.n	800275e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	b2da      	uxtb	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	1c58      	adds	r0, r3, #1
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	6288      	str	r0, [r1, #40]	; 0x28
 8002756:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002762:	b29b      	uxth	r3, r3
 8002764:	3b01      	subs	r3, #1
 8002766:	b29b      	uxth	r3, r3
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	4619      	mov	r1, r3
 800276c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800276e:	2b00      	cmp	r3, #0
 8002770:	d120      	bne.n	80027b4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0220 	bic.w	r2, r2, #32
 8002780:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002790:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0201 	bic.w	r2, r2, #1
 80027a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff fe8a 	bl	80024c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	e002      	b.n	80027ba <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	e000      	b.n	80027ba <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80027b8:	2302      	movs	r3, #2
  }
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002806:	f023 030c 	bic.w	r3, r3, #12
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	68f9      	ldr	r1, [r7, #12]
 8002810:	430b      	orrs	r3, r1
 8002812:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699a      	ldr	r2, [r3, #24]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002832:	f040 818b 	bne.w	8002b4c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4ac1      	ldr	r2, [pc, #772]	; (8002b40 <UART_SetConfig+0x37c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d005      	beq.n	800284c <UART_SetConfig+0x88>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4abf      	ldr	r2, [pc, #764]	; (8002b44 <UART_SetConfig+0x380>)
 8002846:	4293      	cmp	r3, r2
 8002848:	f040 80bd 	bne.w	80029c6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800284c:	f7ff fb90 	bl	8001f70 <HAL_RCC_GetPCLK2Freq>
 8002850:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	461d      	mov	r5, r3
 8002856:	f04f 0600 	mov.w	r6, #0
 800285a:	46a8      	mov	r8, r5
 800285c:	46b1      	mov	r9, r6
 800285e:	eb18 0308 	adds.w	r3, r8, r8
 8002862:	eb49 0409 	adc.w	r4, r9, r9
 8002866:	4698      	mov	r8, r3
 8002868:	46a1      	mov	r9, r4
 800286a:	eb18 0805 	adds.w	r8, r8, r5
 800286e:	eb49 0906 	adc.w	r9, r9, r6
 8002872:	f04f 0100 	mov.w	r1, #0
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800287e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002882:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002886:	4688      	mov	r8, r1
 8002888:	4691      	mov	r9, r2
 800288a:	eb18 0005 	adds.w	r0, r8, r5
 800288e:	eb49 0106 	adc.w	r1, r9, r6
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	461d      	mov	r5, r3
 8002898:	f04f 0600 	mov.w	r6, #0
 800289c:	196b      	adds	r3, r5, r5
 800289e:	eb46 0406 	adc.w	r4, r6, r6
 80028a2:	461a      	mov	r2, r3
 80028a4:	4623      	mov	r3, r4
 80028a6:	f7fd fc8f 	bl	80001c8 <__aeabi_uldivmod>
 80028aa:	4603      	mov	r3, r0
 80028ac:	460c      	mov	r4, r1
 80028ae:	461a      	mov	r2, r3
 80028b0:	4ba5      	ldr	r3, [pc, #660]	; (8002b48 <UART_SetConfig+0x384>)
 80028b2:	fba3 2302 	umull	r2, r3, r3, r2
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	461d      	mov	r5, r3
 80028c0:	f04f 0600 	mov.w	r6, #0
 80028c4:	46a9      	mov	r9, r5
 80028c6:	46b2      	mov	sl, r6
 80028c8:	eb19 0309 	adds.w	r3, r9, r9
 80028cc:	eb4a 040a 	adc.w	r4, sl, sl
 80028d0:	4699      	mov	r9, r3
 80028d2:	46a2      	mov	sl, r4
 80028d4:	eb19 0905 	adds.w	r9, r9, r5
 80028d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80028dc:	f04f 0100 	mov.w	r1, #0
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028f0:	4689      	mov	r9, r1
 80028f2:	4692      	mov	sl, r2
 80028f4:	eb19 0005 	adds.w	r0, r9, r5
 80028f8:	eb4a 0106 	adc.w	r1, sl, r6
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	461d      	mov	r5, r3
 8002902:	f04f 0600 	mov.w	r6, #0
 8002906:	196b      	adds	r3, r5, r5
 8002908:	eb46 0406 	adc.w	r4, r6, r6
 800290c:	461a      	mov	r2, r3
 800290e:	4623      	mov	r3, r4
 8002910:	f7fd fc5a 	bl	80001c8 <__aeabi_uldivmod>
 8002914:	4603      	mov	r3, r0
 8002916:	460c      	mov	r4, r1
 8002918:	461a      	mov	r2, r3
 800291a:	4b8b      	ldr	r3, [pc, #556]	; (8002b48 <UART_SetConfig+0x384>)
 800291c:	fba3 1302 	umull	r1, r3, r3, r2
 8002920:	095b      	lsrs	r3, r3, #5
 8002922:	2164      	movs	r1, #100	; 0x64
 8002924:	fb01 f303 	mul.w	r3, r1, r3
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	3332      	adds	r3, #50	; 0x32
 800292e:	4a86      	ldr	r2, [pc, #536]	; (8002b48 <UART_SetConfig+0x384>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	095b      	lsrs	r3, r3, #5
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800293c:	4498      	add	r8, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	461d      	mov	r5, r3
 8002942:	f04f 0600 	mov.w	r6, #0
 8002946:	46a9      	mov	r9, r5
 8002948:	46b2      	mov	sl, r6
 800294a:	eb19 0309 	adds.w	r3, r9, r9
 800294e:	eb4a 040a 	adc.w	r4, sl, sl
 8002952:	4699      	mov	r9, r3
 8002954:	46a2      	mov	sl, r4
 8002956:	eb19 0905 	adds.w	r9, r9, r5
 800295a:	eb4a 0a06 	adc.w	sl, sl, r6
 800295e:	f04f 0100 	mov.w	r1, #0
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800296a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800296e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002972:	4689      	mov	r9, r1
 8002974:	4692      	mov	sl, r2
 8002976:	eb19 0005 	adds.w	r0, r9, r5
 800297a:	eb4a 0106 	adc.w	r1, sl, r6
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	461d      	mov	r5, r3
 8002984:	f04f 0600 	mov.w	r6, #0
 8002988:	196b      	adds	r3, r5, r5
 800298a:	eb46 0406 	adc.w	r4, r6, r6
 800298e:	461a      	mov	r2, r3
 8002990:	4623      	mov	r3, r4
 8002992:	f7fd fc19 	bl	80001c8 <__aeabi_uldivmod>
 8002996:	4603      	mov	r3, r0
 8002998:	460c      	mov	r4, r1
 800299a:	461a      	mov	r2, r3
 800299c:	4b6a      	ldr	r3, [pc, #424]	; (8002b48 <UART_SetConfig+0x384>)
 800299e:	fba3 1302 	umull	r1, r3, r3, r2
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	2164      	movs	r1, #100	; 0x64
 80029a6:	fb01 f303 	mul.w	r3, r1, r3
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	3332      	adds	r3, #50	; 0x32
 80029b0:	4a65      	ldr	r2, [pc, #404]	; (8002b48 <UART_SetConfig+0x384>)
 80029b2:	fba2 2303 	umull	r2, r3, r2, r3
 80029b6:	095b      	lsrs	r3, r3, #5
 80029b8:	f003 0207 	and.w	r2, r3, #7
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4442      	add	r2, r8
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	e26f      	b.n	8002ea6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029c6:	f7ff fabf 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 80029ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	461d      	mov	r5, r3
 80029d0:	f04f 0600 	mov.w	r6, #0
 80029d4:	46a8      	mov	r8, r5
 80029d6:	46b1      	mov	r9, r6
 80029d8:	eb18 0308 	adds.w	r3, r8, r8
 80029dc:	eb49 0409 	adc.w	r4, r9, r9
 80029e0:	4698      	mov	r8, r3
 80029e2:	46a1      	mov	r9, r4
 80029e4:	eb18 0805 	adds.w	r8, r8, r5
 80029e8:	eb49 0906 	adc.w	r9, r9, r6
 80029ec:	f04f 0100 	mov.w	r1, #0
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80029f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80029fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a00:	4688      	mov	r8, r1
 8002a02:	4691      	mov	r9, r2
 8002a04:	eb18 0005 	adds.w	r0, r8, r5
 8002a08:	eb49 0106 	adc.w	r1, r9, r6
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	461d      	mov	r5, r3
 8002a12:	f04f 0600 	mov.w	r6, #0
 8002a16:	196b      	adds	r3, r5, r5
 8002a18:	eb46 0406 	adc.w	r4, r6, r6
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4623      	mov	r3, r4
 8002a20:	f7fd fbd2 	bl	80001c8 <__aeabi_uldivmod>
 8002a24:	4603      	mov	r3, r0
 8002a26:	460c      	mov	r4, r1
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4b47      	ldr	r3, [pc, #284]	; (8002b48 <UART_SetConfig+0x384>)
 8002a2c:	fba3 2302 	umull	r2, r3, r3, r2
 8002a30:	095b      	lsrs	r3, r3, #5
 8002a32:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	461d      	mov	r5, r3
 8002a3a:	f04f 0600 	mov.w	r6, #0
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	46b2      	mov	sl, r6
 8002a42:	eb19 0309 	adds.w	r3, r9, r9
 8002a46:	eb4a 040a 	adc.w	r4, sl, sl
 8002a4a:	4699      	mov	r9, r3
 8002a4c:	46a2      	mov	sl, r4
 8002a4e:	eb19 0905 	adds.w	r9, r9, r5
 8002a52:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a56:	f04f 0100 	mov.w	r1, #0
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a6a:	4689      	mov	r9, r1
 8002a6c:	4692      	mov	sl, r2
 8002a6e:	eb19 0005 	adds.w	r0, r9, r5
 8002a72:	eb4a 0106 	adc.w	r1, sl, r6
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	461d      	mov	r5, r3
 8002a7c:	f04f 0600 	mov.w	r6, #0
 8002a80:	196b      	adds	r3, r5, r5
 8002a82:	eb46 0406 	adc.w	r4, r6, r6
 8002a86:	461a      	mov	r2, r3
 8002a88:	4623      	mov	r3, r4
 8002a8a:	f7fd fb9d 	bl	80001c8 <__aeabi_uldivmod>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	460c      	mov	r4, r1
 8002a92:	461a      	mov	r2, r3
 8002a94:	4b2c      	ldr	r3, [pc, #176]	; (8002b48 <UART_SetConfig+0x384>)
 8002a96:	fba3 1302 	umull	r1, r3, r3, r2
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	2164      	movs	r1, #100	; 0x64
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	3332      	adds	r3, #50	; 0x32
 8002aa8:	4a27      	ldr	r2, [pc, #156]	; (8002b48 <UART_SetConfig+0x384>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ab6:	4498      	add	r8, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	461d      	mov	r5, r3
 8002abc:	f04f 0600 	mov.w	r6, #0
 8002ac0:	46a9      	mov	r9, r5
 8002ac2:	46b2      	mov	sl, r6
 8002ac4:	eb19 0309 	adds.w	r3, r9, r9
 8002ac8:	eb4a 040a 	adc.w	r4, sl, sl
 8002acc:	4699      	mov	r9, r3
 8002ace:	46a2      	mov	sl, r4
 8002ad0:	eb19 0905 	adds.w	r9, r9, r5
 8002ad4:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ad8:	f04f 0100 	mov.w	r1, #0
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ae4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ae8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002aec:	4689      	mov	r9, r1
 8002aee:	4692      	mov	sl, r2
 8002af0:	eb19 0005 	adds.w	r0, r9, r5
 8002af4:	eb4a 0106 	adc.w	r1, sl, r6
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	461d      	mov	r5, r3
 8002afe:	f04f 0600 	mov.w	r6, #0
 8002b02:	196b      	adds	r3, r5, r5
 8002b04:	eb46 0406 	adc.w	r4, r6, r6
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4623      	mov	r3, r4
 8002b0c:	f7fd fb5c 	bl	80001c8 <__aeabi_uldivmod>
 8002b10:	4603      	mov	r3, r0
 8002b12:	460c      	mov	r4, r1
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <UART_SetConfig+0x384>)
 8002b18:	fba3 1302 	umull	r1, r3, r3, r2
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	2164      	movs	r1, #100	; 0x64
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	3332      	adds	r3, #50	; 0x32
 8002b2a:	4a07      	ldr	r2, [pc, #28]	; (8002b48 <UART_SetConfig+0x384>)
 8002b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	f003 0207 	and.w	r2, r3, #7
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4442      	add	r2, r8
 8002b3c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002b3e:	e1b2      	b.n	8002ea6 <UART_SetConfig+0x6e2>
 8002b40:	40011000 	.word	0x40011000
 8002b44:	40011400 	.word	0x40011400
 8002b48:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4ad7      	ldr	r2, [pc, #860]	; (8002eb0 <UART_SetConfig+0x6ec>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d005      	beq.n	8002b62 <UART_SetConfig+0x39e>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4ad6      	ldr	r2, [pc, #856]	; (8002eb4 <UART_SetConfig+0x6f0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	f040 80d1 	bne.w	8002d04 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b62:	f7ff fa05 	bl	8001f70 <HAL_RCC_GetPCLK2Freq>
 8002b66:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	469a      	mov	sl, r3
 8002b6c:	f04f 0b00 	mov.w	fp, #0
 8002b70:	46d0      	mov	r8, sl
 8002b72:	46d9      	mov	r9, fp
 8002b74:	eb18 0308 	adds.w	r3, r8, r8
 8002b78:	eb49 0409 	adc.w	r4, r9, r9
 8002b7c:	4698      	mov	r8, r3
 8002b7e:	46a1      	mov	r9, r4
 8002b80:	eb18 080a 	adds.w	r8, r8, sl
 8002b84:	eb49 090b 	adc.w	r9, r9, fp
 8002b88:	f04f 0100 	mov.w	r1, #0
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b94:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b98:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b9c:	4688      	mov	r8, r1
 8002b9e:	4691      	mov	r9, r2
 8002ba0:	eb1a 0508 	adds.w	r5, sl, r8
 8002ba4:	eb4b 0609 	adc.w	r6, fp, r9
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4619      	mov	r1, r3
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	f04f 0400 	mov.w	r4, #0
 8002bba:	0094      	lsls	r4, r2, #2
 8002bbc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bc0:	008b      	lsls	r3, r1, #2
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4623      	mov	r3, r4
 8002bc6:	4628      	mov	r0, r5
 8002bc8:	4631      	mov	r1, r6
 8002bca:	f7fd fafd 	bl	80001c8 <__aeabi_uldivmod>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	460c      	mov	r4, r1
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4bb8      	ldr	r3, [pc, #736]	; (8002eb8 <UART_SetConfig+0x6f4>)
 8002bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	469b      	mov	fp, r3
 8002be4:	f04f 0c00 	mov.w	ip, #0
 8002be8:	46d9      	mov	r9, fp
 8002bea:	46e2      	mov	sl, ip
 8002bec:	eb19 0309 	adds.w	r3, r9, r9
 8002bf0:	eb4a 040a 	adc.w	r4, sl, sl
 8002bf4:	4699      	mov	r9, r3
 8002bf6:	46a2      	mov	sl, r4
 8002bf8:	eb19 090b 	adds.w	r9, r9, fp
 8002bfc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c00:	f04f 0100 	mov.w	r1, #0
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c14:	4689      	mov	r9, r1
 8002c16:	4692      	mov	sl, r2
 8002c18:	eb1b 0509 	adds.w	r5, fp, r9
 8002c1c:	eb4c 060a 	adc.w	r6, ip, sl
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	4619      	mov	r1, r3
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	f04f 0400 	mov.w	r4, #0
 8002c32:	0094      	lsls	r4, r2, #2
 8002c34:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c38:	008b      	lsls	r3, r1, #2
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	4623      	mov	r3, r4
 8002c3e:	4628      	mov	r0, r5
 8002c40:	4631      	mov	r1, r6
 8002c42:	f7fd fac1 	bl	80001c8 <__aeabi_uldivmod>
 8002c46:	4603      	mov	r3, r0
 8002c48:	460c      	mov	r4, r1
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4b9a      	ldr	r3, [pc, #616]	; (8002eb8 <UART_SetConfig+0x6f4>)
 8002c4e:	fba3 1302 	umull	r1, r3, r3, r2
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	2164      	movs	r1, #100	; 0x64
 8002c56:	fb01 f303 	mul.w	r3, r1, r3
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	3332      	adds	r3, #50	; 0x32
 8002c60:	4a95      	ldr	r2, [pc, #596]	; (8002eb8 <UART_SetConfig+0x6f4>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c6c:	4498      	add	r8, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	469b      	mov	fp, r3
 8002c72:	f04f 0c00 	mov.w	ip, #0
 8002c76:	46d9      	mov	r9, fp
 8002c78:	46e2      	mov	sl, ip
 8002c7a:	eb19 0309 	adds.w	r3, r9, r9
 8002c7e:	eb4a 040a 	adc.w	r4, sl, sl
 8002c82:	4699      	mov	r9, r3
 8002c84:	46a2      	mov	sl, r4
 8002c86:	eb19 090b 	adds.w	r9, r9, fp
 8002c8a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c8e:	f04f 0100 	mov.w	r1, #0
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ca2:	4689      	mov	r9, r1
 8002ca4:	4692      	mov	sl, r2
 8002ca6:	eb1b 0509 	adds.w	r5, fp, r9
 8002caa:	eb4c 060a 	adc.w	r6, ip, sl
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	f04f 0400 	mov.w	r4, #0
 8002cc0:	0094      	lsls	r4, r2, #2
 8002cc2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cc6:	008b      	lsls	r3, r1, #2
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4623      	mov	r3, r4
 8002ccc:	4628      	mov	r0, r5
 8002cce:	4631      	mov	r1, r6
 8002cd0:	f7fd fa7a 	bl	80001c8 <__aeabi_uldivmod>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	460c      	mov	r4, r1
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b77      	ldr	r3, [pc, #476]	; (8002eb8 <UART_SetConfig+0x6f4>)
 8002cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ce0:	095b      	lsrs	r3, r3, #5
 8002ce2:	2164      	movs	r1, #100	; 0x64
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	3332      	adds	r3, #50	; 0x32
 8002cee:	4a72      	ldr	r2, [pc, #456]	; (8002eb8 <UART_SetConfig+0x6f4>)
 8002cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	f003 020f 	and.w	r2, r3, #15
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4442      	add	r2, r8
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	e0d0      	b.n	8002ea6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d04:	f7ff f920 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 8002d08:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	469a      	mov	sl, r3
 8002d0e:	f04f 0b00 	mov.w	fp, #0
 8002d12:	46d0      	mov	r8, sl
 8002d14:	46d9      	mov	r9, fp
 8002d16:	eb18 0308 	adds.w	r3, r8, r8
 8002d1a:	eb49 0409 	adc.w	r4, r9, r9
 8002d1e:	4698      	mov	r8, r3
 8002d20:	46a1      	mov	r9, r4
 8002d22:	eb18 080a 	adds.w	r8, r8, sl
 8002d26:	eb49 090b 	adc.w	r9, r9, fp
 8002d2a:	f04f 0100 	mov.w	r1, #0
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d36:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d3a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d3e:	4688      	mov	r8, r1
 8002d40:	4691      	mov	r9, r2
 8002d42:	eb1a 0508 	adds.w	r5, sl, r8
 8002d46:	eb4b 0609 	adc.w	r6, fp, r9
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	f04f 0400 	mov.w	r4, #0
 8002d5c:	0094      	lsls	r4, r2, #2
 8002d5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d62:	008b      	lsls	r3, r1, #2
 8002d64:	461a      	mov	r2, r3
 8002d66:	4623      	mov	r3, r4
 8002d68:	4628      	mov	r0, r5
 8002d6a:	4631      	mov	r1, r6
 8002d6c:	f7fd fa2c 	bl	80001c8 <__aeabi_uldivmod>
 8002d70:	4603      	mov	r3, r0
 8002d72:	460c      	mov	r4, r1
 8002d74:	461a      	mov	r2, r3
 8002d76:	4b50      	ldr	r3, [pc, #320]	; (8002eb8 <UART_SetConfig+0x6f4>)
 8002d78:	fba3 2302 	umull	r2, r3, r3, r2
 8002d7c:	095b      	lsrs	r3, r3, #5
 8002d7e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	469b      	mov	fp, r3
 8002d86:	f04f 0c00 	mov.w	ip, #0
 8002d8a:	46d9      	mov	r9, fp
 8002d8c:	46e2      	mov	sl, ip
 8002d8e:	eb19 0309 	adds.w	r3, r9, r9
 8002d92:	eb4a 040a 	adc.w	r4, sl, sl
 8002d96:	4699      	mov	r9, r3
 8002d98:	46a2      	mov	sl, r4
 8002d9a:	eb19 090b 	adds.w	r9, r9, fp
 8002d9e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002da2:	f04f 0100 	mov.w	r1, #0
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002db2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002db6:	4689      	mov	r9, r1
 8002db8:	4692      	mov	sl, r2
 8002dba:	eb1b 0509 	adds.w	r5, fp, r9
 8002dbe:	eb4c 060a 	adc.w	r6, ip, sl
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	f04f 0400 	mov.w	r4, #0
 8002dd4:	0094      	lsls	r4, r2, #2
 8002dd6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002dda:	008b      	lsls	r3, r1, #2
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4623      	mov	r3, r4
 8002de0:	4628      	mov	r0, r5
 8002de2:	4631      	mov	r1, r6
 8002de4:	f7fd f9f0 	bl	80001c8 <__aeabi_uldivmod>
 8002de8:	4603      	mov	r3, r0
 8002dea:	460c      	mov	r4, r1
 8002dec:	461a      	mov	r2, r3
 8002dee:	4b32      	ldr	r3, [pc, #200]	; (8002eb8 <UART_SetConfig+0x6f4>)
 8002df0:	fba3 1302 	umull	r1, r3, r3, r2
 8002df4:	095b      	lsrs	r3, r3, #5
 8002df6:	2164      	movs	r1, #100	; 0x64
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	3332      	adds	r3, #50	; 0x32
 8002e02:	4a2d      	ldr	r2, [pc, #180]	; (8002eb8 <UART_SetConfig+0x6f4>)
 8002e04:	fba2 2303 	umull	r2, r3, r2, r3
 8002e08:	095b      	lsrs	r3, r3, #5
 8002e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e0e:	4498      	add	r8, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	469b      	mov	fp, r3
 8002e14:	f04f 0c00 	mov.w	ip, #0
 8002e18:	46d9      	mov	r9, fp
 8002e1a:	46e2      	mov	sl, ip
 8002e1c:	eb19 0309 	adds.w	r3, r9, r9
 8002e20:	eb4a 040a 	adc.w	r4, sl, sl
 8002e24:	4699      	mov	r9, r3
 8002e26:	46a2      	mov	sl, r4
 8002e28:	eb19 090b 	adds.w	r9, r9, fp
 8002e2c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e30:	f04f 0100 	mov.w	r1, #0
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e44:	4689      	mov	r9, r1
 8002e46:	4692      	mov	sl, r2
 8002e48:	eb1b 0509 	adds.w	r5, fp, r9
 8002e4c:	eb4c 060a 	adc.w	r6, ip, sl
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	4619      	mov	r1, r3
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	f04f 0400 	mov.w	r4, #0
 8002e62:	0094      	lsls	r4, r2, #2
 8002e64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e68:	008b      	lsls	r3, r1, #2
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4623      	mov	r3, r4
 8002e6e:	4628      	mov	r0, r5
 8002e70:	4631      	mov	r1, r6
 8002e72:	f7fd f9a9 	bl	80001c8 <__aeabi_uldivmod>
 8002e76:	4603      	mov	r3, r0
 8002e78:	460c      	mov	r4, r1
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <UART_SetConfig+0x6f4>)
 8002e7e:	fba3 1302 	umull	r1, r3, r3, r2
 8002e82:	095b      	lsrs	r3, r3, #5
 8002e84:	2164      	movs	r1, #100	; 0x64
 8002e86:	fb01 f303 	mul.w	r3, r1, r3
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	3332      	adds	r3, #50	; 0x32
 8002e90:	4a09      	ldr	r2, [pc, #36]	; (8002eb8 <UART_SetConfig+0x6f4>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	f003 020f 	and.w	r2, r3, #15
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4442      	add	r2, r8
 8002ea2:	609a      	str	r2, [r3, #8]
}
 8002ea4:	e7ff      	b.n	8002ea6 <UART_SetConfig+0x6e2>
 8002ea6:	bf00      	nop
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eb0:	40011000 	.word	0x40011000
 8002eb4:	40011400 	.word	0x40011400
 8002eb8:	51eb851f 	.word	0x51eb851f

08002ebc <bl_erase_flash>:
#include "main.h"
#include "stdint.h"
#include "receive_message_from_host.h"

int bl_erase_flash(struct erase_flash_msg_s *erase_flash_msg)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	; 0x28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef flash_erase_init;
	uint32_t sector_err;
	HAL_StatusTypeDef status;

	if(erase_flash_msg->sector_number == 0xFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	785b      	ldrb	r3, [r3, #1]
 8002ec8:	2bff      	cmp	r3, #255	; 0xff
 8002eca:	d102      	bne.n	8002ed2 <bl_erase_flash+0x16>
	{
		flash_erase_init.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	e004      	b.n	8002edc <bl_erase_flash+0x20>
	}
	else
	{
		flash_erase_init.TypeErase = FLASH_TYPEERASE_SECTORS;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
		flash_erase_init.Sector = erase_flash_msg->sector_number;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	785b      	ldrb	r3, [r3, #1]
 8002eda:	61bb      	str	r3, [r7, #24]
	}

	flash_erase_init.Banks = FLASH_BANK_1;
 8002edc:	2301      	movs	r3, #1
 8002ede:	617b      	str	r3, [r7, #20]
	flash_erase_init.NbSectors = 1;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	61fb      	str	r3, [r7, #28]
	flash_erase_init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	623b      	str	r3, [r7, #32]

	HAL_FLASH_Unlock();
 8002ee8:	f7fd ff9c 	bl	8000e24 <HAL_FLASH_Unlock>
	status = HAL_FLASHEx_Erase(&flash_erase_init, &sector_err);
 8002eec:	f107 020c 	add.w	r2, r7, #12
 8002ef0:	f107 0310 	add.w	r3, r7, #16
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fe f8f4 	bl	80010e4 <HAL_FLASHEx_Erase>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_FLASH_Lock();
 8002f02:	f7fd ffb1 	bl	8000e68 <HAL_FLASH_Lock>

	if(status != HAL_OK)
 8002f06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d004      	beq.n	8002f18 <bl_erase_flash+0x5c>
	{
		send_message_to_host((uint8_t) TX_ERASE_FAILED_CODE);
 8002f0e:	2005      	movs	r0, #5
 8002f10:	f000 f8fa 	bl	8003108 <send_message_to_host>
		return ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e003      	b.n	8002f20 <bl_erase_flash+0x64>
	}
	send_message_to_host((uint8_t) TX_ERASE_SUCCESS_CODE);
 8002f18:	2003      	movs	r0, #3
 8002f1a:	f000 f8f5 	bl	8003108 <send_message_to_host>
	return SUCCESS;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3728      	adds	r7, #40	; 0x28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <execute_mem_write>:
#include "main.h"
#include "stdint.h"


uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 8002f28:	b590      	push	{r4, r7, lr}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
    uint8_t status = HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	75fb      	strb	r3, [r7, #23]

    //We have to unlock flash module to get control of registers
    HAL_FLASH_Unlock();
 8002f38:	f7fd ff74 	bl	8000e24 <HAL_FLASH_Unlock>

    for(uint32_t i = 0 ; i <len ; i++)
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	e013      	b.n	8002f6a <execute_mem_write+0x42>
    {
        //Here we program the flash byte by byte
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,mem_address+i,pBuffer[i] );
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	18d1      	adds	r1, r2, r3
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	f04f 0400 	mov.w	r4, #0
 8002f56:	461a      	mov	r2, r3
 8002f58:	4623      	mov	r3, r4
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	f7fd ff0e 	bl	8000d7c <HAL_FLASH_Program>
 8002f60:	4603      	mov	r3, r0
 8002f62:	75fb      	strb	r3, [r7, #23]
    for(uint32_t i = 0 ; i <len ; i++)
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	3301      	adds	r3, #1
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d3e7      	bcc.n	8002f42 <execute_mem_write+0x1a>
    }

    HAL_FLASH_Lock();
 8002f72:	f7fd ff79 	bl	8000e68 <HAL_FLASH_Lock>

    return status;
 8002f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	371c      	adds	r7, #28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd90      	pop	{r4, r7, pc}

08002f80 <download_user_app_sector_to_flash>:
#include "write_flash_memory.h"
#include "main.h"
#include "stdint.h"

void download_user_app_sector_to_flash()
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
    //execute_mem_write(uint8_t *pBuffer, sector, uint32_t len);  /*Burayı tamamla*/
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
	...

08002f90 <parse_erase_message>:

PUBLIC void parse_erase_message(uint8_t bl_received_command)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	71fb      	strb	r3, [r7, #7]
    erase_flash_msg.command_code = bl_received_command;
 8002f9a:	4a0f      	ldr	r2, [pc, #60]	; (8002fd8 <parse_erase_message+0x48>)
 8002f9c:	79fb      	ldrb	r3, [r7, #7]
 8002f9e:	7013      	strb	r3, [r2, #0]
    receive_message_from_host_polling(&erase_flash_msg.sector_number, (uint16_t) sizeof(struct erase_flash_msg_s) - 1);
 8002fa0:	2105      	movs	r1, #5
 8002fa2:	480e      	ldr	r0, [pc, #56]	; (8002fdc <parse_erase_message+0x4c>)
 8002fa4:	f000 f876 	bl	8003094 <receive_message_from_host_polling>
    
    uint8_t crc_status = bootloader_verify_crc((uint8_t *) &erase_flash_msg, sizeof(struct erase_flash_msg_s) - sizeof(erase_flash_msg.crc_val), erase_flash_msg.crc_val);
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <parse_erase_message+0x48>)
 8002faa:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	2102      	movs	r1, #2
 8002fb2:	4809      	ldr	r0, [pc, #36]	; (8002fd8 <parse_erase_message+0x48>)
 8002fb4:	f7fd fcc2 	bl	800093c <bootloader_verify_crc>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	73fb      	strb	r3, [r7, #15]
    if(crc_status == SUCCESS)
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d103      	bne.n	8002fca <parse_erase_message+0x3a>
    {
        bl_erase_flash(&erase_flash_msg);
 8002fc2:	4805      	ldr	r0, [pc, #20]	; (8002fd8 <parse_erase_message+0x48>)
 8002fc4:	f7ff ff7a 	bl	8002ebc <bl_erase_flash>
    }
    else
    {
        send_message_to_host((uint8_t) TX_ERASE_FAILED_CODE);
    }
}
 8002fc8:	e002      	b.n	8002fd0 <parse_erase_message+0x40>
        send_message_to_host((uint8_t) TX_ERASE_FAILED_CODE);
 8002fca:	2005      	movs	r0, #5
 8002fcc:	f000 f89c 	bl	8003108 <send_message_to_host>
}
 8002fd0:	bf00      	nop
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	20000094 	.word	0x20000094
 8002fdc:	20000095 	.word	0x20000095

08002fe0 <parse_write_message>:

PUBLIC void parse_write_message(uint8_t bl_received_command)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	71fb      	strb	r3, [r7, #7]
    uint8_t addres_arr[4];
    write_flash_msg.write_flash_header.command_code = bl_received_command;
 8002fea:	4a26      	ldr	r2, [pc, #152]	; (8003084 <parse_write_message+0xa4>)
 8002fec:	79fb      	ldrb	r3, [r7, #7]
 8002fee:	7013      	strb	r3, [r2, #0]

    receive_message_from_host_polling(addres_arr, (uint16_t) sizeof(struct write_flash_header_s) - 2*sizeof(uint8_t));
 8002ff0:	f107 0308 	add.w	r3, r7, #8
 8002ff4:	2104      	movs	r1, #4
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 f84c 	bl	8003094 <receive_message_from_host_polling>
    write_flash_msg.write_flash_header.write_address = (addres_arr[0] << 3*8) | (addres_arr[1] << 2*8) | (addres_arr[2] << 1*8) | (addres_arr[3]) ;
 8002ffc:	7a3b      	ldrb	r3, [r7, #8]
 8002ffe:	061a      	lsls	r2, r3, #24
 8003000:	7a7b      	ldrb	r3, [r7, #9]
 8003002:	041b      	lsls	r3, r3, #16
 8003004:	431a      	orrs	r2, r3
 8003006:	7abb      	ldrb	r3, [r7, #10]
 8003008:	021b      	lsls	r3, r3, #8
 800300a:	4313      	orrs	r3, r2
 800300c:	7afa      	ldrb	r2, [r7, #11]
 800300e:	4313      	orrs	r3, r2
 8003010:	461a      	mov	r2, r3
 8003012:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <parse_write_message+0xa4>)
 8003014:	f8c3 2001 	str.w	r2, [r3, #1]

    receive_message_from_host_polling(&write_flash_msg.write_flash_header.data_len, (uint16_t) sizeof(write_flash_msg.write_flash_header.data_len));
 8003018:	2101      	movs	r1, #1
 800301a:	481b      	ldr	r0, [pc, #108]	; (8003088 <parse_write_message+0xa8>)
 800301c:	f000 f83a 	bl	8003094 <receive_message_from_host_polling>
    receive_message_from_host_polling((uint8_t *)write_flash_msg.data, (uint16_t) write_flash_msg.write_flash_header.data_len);
 8003020:	4b18      	ldr	r3, [pc, #96]	; (8003084 <parse_write_message+0xa4>)
 8003022:	795b      	ldrb	r3, [r3, #5]
 8003024:	b29b      	uxth	r3, r3
 8003026:	4619      	mov	r1, r3
 8003028:	4818      	ldr	r0, [pc, #96]	; (800308c <parse_write_message+0xac>)
 800302a:	f000 f833 	bl	8003094 <receive_message_from_host_polling>
    receive_message_from_host_polling((uint8_t *)&write_flash_msg.crc_val, (uint16_t) sizeof(uint32_t));
 800302e:	2104      	movs	r1, #4
 8003030:	4817      	ldr	r0, [pc, #92]	; (8003090 <parse_write_message+0xb0>)
 8003032:	f000 f82f 	bl	8003094 <receive_message_from_host_polling>

    uint8_t crc_status = bootloader_verify_crc((uint8_t *)&write_flash_msg, sizeof(struct write_flash_header_s) + write_flash_msg.write_flash_header.data_len , write_flash_msg.crc_val);
 8003036:	4b13      	ldr	r3, [pc, #76]	; (8003084 <parse_write_message+0xa4>)
 8003038:	795b      	ldrb	r3, [r3, #5]
 800303a:	1d99      	adds	r1, r3, #6
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <parse_write_message+0xa4>)
 800303e:	f8d3 3105 	ldr.w	r3, [r3, #261]	; 0x105
 8003042:	461a      	mov	r2, r3
 8003044:	480f      	ldr	r0, [pc, #60]	; (8003084 <parse_write_message+0xa4>)
 8003046:	f7fd fc79 	bl	800093c <bootloader_verify_crc>
 800304a:	4603      	mov	r3, r0
 800304c:	73fb      	strb	r3, [r7, #15]

    uint8_t status = execute_mem_write(write_flash_msg.data, write_flash_msg.write_flash_header.write_address, write_flash_msg.write_flash_header.data_len);
 800304e:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <parse_write_message+0xa4>)
 8003050:	f8d3 1001 	ldr.w	r1, [r3, #1]
 8003054:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <parse_write_message+0xa4>)
 8003056:	795b      	ldrb	r3, [r3, #5]
 8003058:	461a      	mov	r2, r3
 800305a:	480c      	ldr	r0, [pc, #48]	; (800308c <parse_write_message+0xac>)
 800305c:	f7ff ff64 	bl	8002f28 <execute_mem_write>
 8003060:	4603      	mov	r3, r0
 8003062:	73bb      	strb	r3, [r7, #14]

    if(status == HAL_OK)
 8003064:	7bbb      	ldrb	r3, [r7, #14]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d105      	bne.n	8003076 <parse_write_message+0x96>
    {
        send_message_to_host((uint8_t) TX_WRITE_SUCCESS_CODE);
 800306a:	2002      	movs	r0, #2
 800306c:	f000 f84c 	bl	8003108 <send_message_to_host>
        download_user_app_sector_to_flash();
 8003070:	f7ff ff86 	bl	8002f80 <download_user_app_sector_to_flash>
    }
    else
        send_message_to_host((uint8_t) TX_WRITE_FAILED_CODE); 
    
}
 8003074:	e002      	b.n	800307c <parse_write_message+0x9c>
        send_message_to_host((uint8_t) TX_WRITE_FAILED_CODE); 
 8003076:	2004      	movs	r0, #4
 8003078:	f000 f846 	bl	8003108 <send_message_to_host>
}
 800307c:	bf00      	nop
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	2000009c 	.word	0x2000009c
 8003088:	200000a1 	.word	0x200000a1
 800308c:	200000a2 	.word	0x200000a2
 8003090:	200001a1 	.word	0x200001a1

08003094 <receive_message_from_host_polling>:

struct erase_flash_msg_s erase_flash_msg;
struct write_flash_msg_s write_flash_msg;

PUBLIC void receive_message_from_host_polling(uint8_t * pData, uint16_t size)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	807b      	strh	r3, [r7, #2]
    HAL_StatusTypeDef status = HAL_UART_Receive(&huart3, pData, size, HAL_MAX_DELAY);
 80030a0:	887a      	ldrh	r2, [r7, #2]
 80030a2:	f04f 33ff 	mov.w	r3, #4294967295
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	480a      	ldr	r0, [pc, #40]	; (80030d4 <receive_message_from_host_polling+0x40>)
 80030aa:	f7ff f85b 	bl	8002164 <HAL_UART_Receive>
 80030ae:	4603      	mov	r3, r0
 80030b0:	73fb      	strb	r3, [r7, #15]
    while(status != HAL_OK)
 80030b2:	e008      	b.n	80030c6 <receive_message_from_host_polling+0x32>
    {
        status = HAL_UART_Receive(&huart3, pData, size, HAL_MAX_DELAY);
 80030b4:	887a      	ldrh	r2, [r7, #2]
 80030b6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	4805      	ldr	r0, [pc, #20]	; (80030d4 <receive_message_from_host_polling+0x40>)
 80030be:	f7ff f851 	bl	8002164 <HAL_UART_Receive>
 80030c2:	4603      	mov	r3, r0
 80030c4:	73fb      	strb	r3, [r7, #15]
    while(status != HAL_OK)
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f3      	bne.n	80030b4 <receive_message_from_host_polling+0x20>
    }
}
 80030cc:	bf00      	nop
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	20000028 	.word	0x20000028

080030d8 <bootloader_uart_read_data>:

PUBLIC void bootloader_uart_read_data(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
    uint8_t bl_received_command;
	while(1)
	{
        receive_message_from_host_polling(&bl_received_command, (uint16_t) SIZE_OF_COMMAND_CODE);
 80030de:	1dfb      	adds	r3, r7, #7
 80030e0:	2101      	movs	r1, #1
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff ffd6 	bl	8003094 <receive_message_from_host_polling>

		if(bl_received_command == CMD_ERASE_FLASH)
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	2baa      	cmp	r3, #170	; 0xaa
 80030ec:	d104      	bne.n	80030f8 <bootloader_uart_read_data+0x20>
		{
            parse_erase_message(bl_received_command);
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff ff4d 	bl	8002f90 <parse_erase_message>
 80030f6:	e7f2      	b.n	80030de <bootloader_uart_read_data+0x6>
		}
		else if(bl_received_command == CMD_WRITE_FLASH)
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	2bbb      	cmp	r3, #187	; 0xbb
 80030fc:	d1ef      	bne.n	80030de <bootloader_uart_read_data+0x6>
		{
            parse_write_message(bl_received_command);
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff ff6d 	bl	8002fe0 <parse_write_message>
        receive_message_from_host_polling(&bl_received_command, (uint16_t) SIZE_OF_COMMAND_CODE);
 8003106:	e7ea      	b.n	80030de <bootloader_uart_read_data+0x6>

08003108 <send_message_to_host>:
#include "send_message_to_host.h"
#include "main.h"


PUBLIC void send_message_to_host(uint8_t message_code)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3, &message_code, 1, HAL_MAX_DELAY);
 8003112:	1df9      	adds	r1, r7, #7
 8003114:	f04f 33ff 	mov.w	r3, #4294967295
 8003118:	2201      	movs	r2, #1
 800311a:	4803      	ldr	r0, [pc, #12]	; (8003128 <send_message_to_host+0x20>)
 800311c:	f7fe ff89 	bl	8002032 <HAL_UART_Transmit>
}
 8003120:	bf00      	nop
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	20000028 	.word	0x20000028

0800312c <__libc_init_array>:
 800312c:	b570      	push	{r4, r5, r6, lr}
 800312e:	4e0d      	ldr	r6, [pc, #52]	; (8003164 <__libc_init_array+0x38>)
 8003130:	4c0d      	ldr	r4, [pc, #52]	; (8003168 <__libc_init_array+0x3c>)
 8003132:	1ba4      	subs	r4, r4, r6
 8003134:	10a4      	asrs	r4, r4, #2
 8003136:	2500      	movs	r5, #0
 8003138:	42a5      	cmp	r5, r4
 800313a:	d109      	bne.n	8003150 <__libc_init_array+0x24>
 800313c:	4e0b      	ldr	r6, [pc, #44]	; (800316c <__libc_init_array+0x40>)
 800313e:	4c0c      	ldr	r4, [pc, #48]	; (8003170 <__libc_init_array+0x44>)
 8003140:	f000 f820 	bl	8003184 <_init>
 8003144:	1ba4      	subs	r4, r4, r6
 8003146:	10a4      	asrs	r4, r4, #2
 8003148:	2500      	movs	r5, #0
 800314a:	42a5      	cmp	r5, r4
 800314c:	d105      	bne.n	800315a <__libc_init_array+0x2e>
 800314e:	bd70      	pop	{r4, r5, r6, pc}
 8003150:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003154:	4798      	blx	r3
 8003156:	3501      	adds	r5, #1
 8003158:	e7ee      	b.n	8003138 <__libc_init_array+0xc>
 800315a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800315e:	4798      	blx	r3
 8003160:	3501      	adds	r5, #1
 8003162:	e7f2      	b.n	800314a <__libc_init_array+0x1e>
 8003164:	080031bc 	.word	0x080031bc
 8003168:	080031bc 	.word	0x080031bc
 800316c:	080031bc 	.word	0x080031bc
 8003170:	080031c0 	.word	0x080031c0

08003174 <memset>:
 8003174:	4402      	add	r2, r0
 8003176:	4603      	mov	r3, r0
 8003178:	4293      	cmp	r3, r2
 800317a:	d100      	bne.n	800317e <memset+0xa>
 800317c:	4770      	bx	lr
 800317e:	f803 1b01 	strb.w	r1, [r3], #1
 8003182:	e7f9      	b.n	8003178 <memset+0x4>

08003184 <_init>:
 8003184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003186:	bf00      	nop
 8003188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800318a:	bc08      	pop	{r3}
 800318c:	469e      	mov	lr, r3
 800318e:	4770      	bx	lr

08003190 <_fini>:
 8003190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003192:	bf00      	nop
 8003194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003196:	bc08      	pop	{r3}
 8003198:	469e      	mov	lr, r3
 800319a:	4770      	bx	lr
